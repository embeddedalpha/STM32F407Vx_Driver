
Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014dc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001684  08001684  00011684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800169c  0800169c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800169c  0800169c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800169c  0800169c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800169c  0800169c  0001169c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016a0  080016a0  000116a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080016a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          000000e0  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000621c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000b93  00000000  00000000  00026293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000248  00000000  00000000  00026e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001a6  00000000  00000000  00027070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a098  00000000  00000000  00027216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000453d  00000000  00000000  000412ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008ee8f  00000000  00000000  000457eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000007e8  00000000  00000000  000d467c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000d4e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800166c 	.word	0x0800166c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	0800166c 	.word	0x0800166c

080001e8 <CAN1_TX_IRQHandler>:


/************************************************************************************************/

__WEAK void CAN1_TX_IRQHandler(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0


}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr

080001f6 <CAN1_RX0_IRQHandler>:

__WEAK void CAN1_RX0_IRQHandler(void)
{
 80001f6:	b480      	push	{r7}
 80001f8:	af00      	add	r7, sp, #0

}
 80001fa:	bf00      	nop
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <CAN1_RX1_IRQHandler>:

__WEAK void CAN1_RX1_IRQHandler(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0

}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr

08000212 <CAN1_SCE_IRQHandler>:

__WEAK void CAN1_SCE_IRQHandler(void)
{
 8000212:	b480      	push	{r7}
 8000214:	af00      	add	r7, sp, #0

}
 8000216:	bf00      	nop
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <CAN2_TX_IRQHandler>:

__WEAK void CAN2_TX_IRQHandler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0


}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <CAN2_RX0_IRQHandler>:

__WEAK void CAN2_RX0_IRQHandler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0

}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <CAN2_RX1_IRQHandler>:

__WEAK void CAN2_RX1_IRQHandler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0

}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr

0800024a <CAN2_SCE_IRQHandler>:

__WEAK void CAN2_SCE_IRQHandler(void)
{
 800024a:	b480      	push	{r7}
 800024c:	af00      	add	r7, sp, #0

}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <DMA_Clock_Enable>:

#include "DMA.h"


void DMA_Clock_Enable(DMA_Config *config)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if(config->controller == DMA1) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <DMA_Clock_Enable+0x40>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d105      	bne.n	8000276 <DMA_Clock_Enable+0x1e>
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <DMA_Clock_Enable+0x44>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a0b      	ldr	r2, [pc, #44]	; (800029c <DMA_Clock_Enable+0x44>)
 8000270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
	if(config->controller == DMA2) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a09      	ldr	r2, [pc, #36]	; (80002a0 <DMA_Clock_Enable+0x48>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d105      	bne.n	800028c <DMA_Clock_Enable+0x34>
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <DMA_Clock_Enable+0x44>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a05      	ldr	r2, [pc, #20]	; (800029c <DMA_Clock_Enable+0x44>)
 8000286:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	40026000 	.word	0x40026000
 800029c:	40023800 	.word	0x40023800
 80002a0:	40026400 	.word	0x40026400

080002a4 <DMA_Init>:
	if(config->controller == DMA2) RCC -> AHB1RSTR |= RCC_AHB1RSTR_DMA2RST;
}
//

void DMA_Init(DMA_Config *config)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	DMA_Clock_Enable(config);
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f7ff ffd3 	bl	8000258 <DMA_Clock_Enable>
	config -> stream -> CR |= config -> channel << DMA_SxCR_CHSEL_Pos;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	6819      	ldr	r1, [r3, #0]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	065a      	lsls	r2, r3, #25
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	430a      	orrs	r2, r1
 80002c4:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> circular_mode;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	6819      	ldr	r1, [r3, #0]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	6a1a      	ldr	r2, [r3, #32]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	430a      	orrs	r2, r1
 80002d6:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> flow_control;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	6819      	ldr	r1, [r3, #0]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68da      	ldr	r2, [r3, #12]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	430a      	orrs	r2, r1
 80002e8:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> priority_level;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	6819      	ldr	r1, [r3, #0]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	430a      	orrs	r2, r1
 80002fa:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> memory_data_size;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	6819      	ldr	r1, [r3, #0]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	69da      	ldr	r2, [r3, #28]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	430a      	orrs	r2, r1
 800030c:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> peripheral_data_size;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	6819      	ldr	r1, [r3, #0]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	699a      	ldr	r2, [r3, #24]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	430a      	orrs	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> transfer_direction;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	6819      	ldr	r1, [r3, #0]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	691a      	ldr	r2, [r3, #16]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	430a      	orrs	r2, r1
 8000330:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> interrupts;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	6819      	ldr	r1, [r3, #0]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	430a      	orrs	r2, r1
 8000342:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= DMA_SxCR_MINC;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000352:	601a      	str	r2, [r3, #0]
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <DMA_Set_Target>:

void DMA_Set_Target(DMA_Config *config)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	config -> stream -> M0AR = config->memory_address;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800036c:	60da      	str	r2, [r3, #12]
	config -> stream -> PAR = config->peripheral_address;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000376:	609a      	str	r2, [r3, #8]
	config -> stream -> NDTR = config -> buffer_length;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	605a      	str	r2, [r3, #4]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
	...

08000390 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a25      	ldr	r2, [pc, #148]	; (8000430 <GPIO_Clock_Enable+0xa0>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 80003a0:	4b24      	ldr	r3, [pc, #144]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4a23      	ldr	r2, [pc, #140]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
 80003ac:	e039      	b.n	8000422 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a21      	ldr	r2, [pc, #132]	; (8000438 <GPIO_Clock_Enable+0xa8>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a1e      	ldr	r2, [pc, #120]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 80003bc:	f043 0302 	orr.w	r3, r3, #2
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
 80003c2:	e02e      	b.n	8000422 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a1d      	ldr	r2, [pc, #116]	; (800043c <GPIO_Clock_Enable+0xac>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 80003cc:	4b19      	ldr	r3, [pc, #100]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a18      	ldr	r2, [pc, #96]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
 80003d8:	e023      	b.n	8000422 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a18      	ldr	r2, [pc, #96]	; (8000440 <GPIO_Clock_Enable+0xb0>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a13      	ldr	r2, [pc, #76]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 80003e8:	f043 0308 	orr.w	r3, r3, #8
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
 80003ee:	e018      	b.n	8000422 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a14      	ldr	r2, [pc, #80]	; (8000444 <GPIO_Clock_Enable+0xb4>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 80003fe:	f043 0310 	orr.w	r3, r3, #16
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
 8000404:	e00d      	b.n	8000422 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a0f      	ldr	r2, [pc, #60]	; (8000448 <GPIO_Clock_Enable+0xb8>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a08      	ldr	r2, [pc, #32]	; (8000434 <GPIO_Clock_Enable+0xa4>)
 8000414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
 800041a:	e002      	b.n	8000422 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 800041c:	f04f 33ff 	mov.w	r3, #4294967295
 8000420:	e000      	b.n	8000424 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8000422:	2301      	movs	r3, #1
}
 8000424:	4618      	mov	r0, r3
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40020000 	.word	0x40020000
 8000434:	40023800 	.word	0x40023800
 8000438:	40020400 	.word	0x40020400
 800043c:	40020800 	.word	0x40020800
 8000440:	40020c00 	.word	0x40020c00
 8000444:	40021000 	.word	0x40021000
 8000448:	40021c00 	.word	0x40021c00

0800044c <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	4608      	mov	r0, r1
 8000456:	4611      	mov	r1, r2
 8000458:	461a      	mov	r2, r3
 800045a:	4603      	mov	r3, r0
 800045c:	70fb      	strb	r3, [r7, #3]
 800045e:	460b      	mov	r3, r1
 8000460:	70bb      	strb	r3, [r7, #2]
 8000462:	4613      	mov	r3, r2
 8000464:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f7ff ff92 	bl	8000390 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	78b9      	ldrb	r1, [r7, #2]
 8000472:	78fa      	ldrb	r2, [r7, #3]
 8000474:	0052      	lsls	r2, r2, #1
 8000476:	fa01 f202 	lsl.w	r2, r1, r2
 800047a:	431a      	orrs	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	7879      	ldrb	r1, [r7, #1]
 8000486:	78fa      	ldrb	r2, [r7, #3]
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	431a      	orrs	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	7c39      	ldrb	r1, [r7, #16]
 8000498:	78fa      	ldrb	r2, [r7, #3]
 800049a:	0052      	lsls	r2, r2, #1
 800049c:	fa01 f202 	lsl.w	r2, r1, r2
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	7d39      	ldrb	r1, [r7, #20]
 80004ac:	78fa      	ldrb	r2, [r7, #3]
 80004ae:	0052      	lsls	r2, r2, #1
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80004ba:	78fb      	ldrb	r3, [r7, #3]
 80004bc:	2b07      	cmp	r3, #7
 80004be:	d80a      	bhi.n	80004d6 <GPIO_Pin_Init+0x8a>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6a1b      	ldr	r3, [r3, #32]
 80004c4:	7e39      	ldrb	r1, [r7, #24]
 80004c6:	78fa      	ldrb	r2, [r7, #3]
 80004c8:	0092      	lsls	r2, r2, #2
 80004ca:	fa01 f202 	lsl.w	r2, r1, r2
 80004ce:	431a      	orrs	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 80004d4:	e00a      	b.n	80004ec <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004da:	7e39      	ldrb	r1, [r7, #24]
 80004dc:	78fa      	ldrb	r2, [r7, #3]
 80004de:	3a08      	subs	r2, #8
 80004e0:	0092      	lsls	r2, r2, #2
 80004e2:	fa01 f202 	lsl.w	r2, r1, r2
 80004e6:	431a      	orrs	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <SPI_Clock_Enable>:

DMA_Config xDMA_TX;
DMA_Config xDMA_RX;

int8_t SPI_Clock_Enable(SPI_Config *config)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a14      	ldr	r2, [pc, #80]	; (8000558 <SPI_Clock_Enable+0x64>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d105      	bne.n	8000516 <SPI_Clock_Enable+0x22>
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <SPI_Clock_Enable+0x68>)
 800050c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800050e:	4a13      	ldr	r2, [pc, #76]	; (800055c <SPI_Clock_Enable+0x68>)
 8000510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000514:	6453      	str	r3, [r2, #68]	; 0x44
	if(config ->Port == SPI2)RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a11      	ldr	r2, [pc, #68]	; (8000560 <SPI_Clock_Enable+0x6c>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d105      	bne.n	800052c <SPI_Clock_Enable+0x38>
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <SPI_Clock_Enable+0x68>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <SPI_Clock_Enable+0x68>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
	if(config ->Port == SPI3)RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <SPI_Clock_Enable+0x70>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <SPI_Clock_Enable+0x50>
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <SPI_Clock_Enable+0x68>)
 8000538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <SPI_Clock_Enable+0x68>)
 800053c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000540:	6413      	str	r3, [r2, #64]	; 0x40
 8000542:	e001      	b.n	8000548 <SPI_Clock_Enable+0x54>
	else
		retval = -1;
 8000544:	23ff      	movs	r3, #255	; 0xff
 8000546:	73fb      	strb	r3, [r7, #15]
	return retval;
 8000548:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40013000 	.word	0x40013000
 800055c:	40023800 	.word	0x40023800
 8000560:	40003800 	.word	0x40003800
 8000564:	40003c00 	.word	0x40003c00

08000568 <SPI_Config_Reset>:
	return retval;
}


int8_t SPI_Config_Reset(SPI_Config *config)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2RSTR |= RCC_APB2RSTR_SPI1RST;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a28      	ldr	r2, [pc, #160]	; (800061c <SPI_Config_Reset+0xb4>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d105      	bne.n	800058a <SPI_Config_Reset+0x22>
 800057e:	4b28      	ldr	r3, [pc, #160]	; (8000620 <SPI_Config_Reset+0xb8>)
 8000580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000582:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SPI_Config_Reset+0xb8>)
 8000584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000588:	6253      	str	r3, [r2, #36]	; 0x24
	if(config ->Port == SPI2)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI2RST;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a25      	ldr	r2, [pc, #148]	; (8000624 <SPI_Config_Reset+0xbc>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d105      	bne.n	80005a0 <SPI_Config_Reset+0x38>
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SPI_Config_Reset+0xb8>)
 8000596:	6a1b      	ldr	r3, [r3, #32]
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SPI_Config_Reset+0xb8>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6213      	str	r3, [r2, #32]
	if(config ->Port == SPI3)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI3RST;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a20      	ldr	r2, [pc, #128]	; (8000628 <SPI_Config_Reset+0xc0>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d106      	bne.n	80005b8 <SPI_Config_Reset+0x50>
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <SPI_Config_Reset+0xb8>)
 80005ac:	6a1b      	ldr	r3, [r3, #32]
 80005ae:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <SPI_Config_Reset+0xb8>)
 80005b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005b4:	6213      	str	r3, [r2, #32]
 80005b6:	e001      	b.n	80005bc <SPI_Config_Reset+0x54>
	else
		retval = -1;
 80005b8:	23ff      	movs	r3, #255	; 0xff
 80005ba:	73fb      	strb	r3, [r7, #15]

	config->NSS_Port = GPIOA;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a1b      	ldr	r2, [pc, #108]	; (800062c <SPI_Config_Reset+0xc4>)
 80005c0:	609a      	str	r2, [r3, #8]
	config->NSS_Pin = 4;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2204      	movs	r2, #4
 80005c6:	731a      	strb	r2, [r3, #12]
	config->clock_phase = SPI_Clock_Phase.High_1;
 80005c8:	2201      	movs	r2, #1
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	839a      	strh	r2, [r3, #28]
	config->clock_polarity = SPI_Clock_Polarity.High_1;
 80005ce:	2202      	movs	r2, #2
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	835a      	strh	r2, [r3, #26]
	config->mode = SPI_Mode.Full_Duplex_Master;
 80005d4:	2300      	movs	r3, #0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	81da      	strh	r2, [r3, #14]
	config->crc = SPI_CRC.Disable;
 80005dc:	2200      	movs	r2, #0
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	821a      	strh	r2, [r3, #16]
	config->data_format = SPI_Data_Format.Bit8;
 80005e2:	2200      	movs	r2, #0
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	825a      	strh	r2, [r3, #18]
	config->frame_format = SPI_Frame_Format.MSB_First;
 80005e8:	2200      	movs	r2, #0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	829a      	strh	r2, [r3, #20]
	config->dma = SPI_DMA.TX_DMA_Disable | SPI_DMA.RX_DMA_Disable;
 80005ee:	2200      	movs	r2, #0
 80005f0:	2300      	movs	r3, #0
 80005f2:	4313      	orrs	r3, r2
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	841a      	strh	r2, [r3, #32]
	config->interrupt = SPI_Interrupt.Disable;
 80005fc:	2300      	movs	r3, #0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	83da      	strh	r2, [r3, #30]
	config->type = SPI_Type.Master;
 8000604:	2204      	movs	r2, #4
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	831a      	strh	r2, [r3, #24]

	return retval;
 800060a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40013000 	.word	0x40013000
 8000620:	40023800 	.word	0x40023800
 8000624:	40003800 	.word	0x40003800
 8000628:	40003c00 	.word	0x40003c00
 800062c:	40020000 	.word	0x40020000

08000630 <SPI_Pin>:


static void SPI_Pin(SPI_Config *config)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b087      	sub	sp, #28
 8000634:	af04      	add	r7, sp, #16
 8000636:	6078      	str	r0, [r7, #4]
	if(config -> Port == SPI1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a77      	ldr	r2, [pc, #476]	; (800081c <SPI_Pin+0x1ec>)
 800063e:	4293      	cmp	r3, r2
 8000640:	f040 8158 	bne.w	80008f4 <SPI_Pin+0x2c4>
	{
		if(config->mode == 0)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	89db      	ldrh	r3, [r3, #14]
 8000648:	2b00      	cmp	r3, #0
 800064a:	f040 8081 	bne.w	8000750 <SPI_Pin+0x120>
		{
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	b29b      	uxth	r3, r3
 8000654:	220f      	movs	r2, #15
 8000656:	4293      	cmp	r3, r2
 8000658:	d10d      	bne.n	8000676 <SPI_Pin+0x46>
 800065a:	2002      	movs	r0, #2
 800065c:	2400      	movs	r4, #0
 800065e:	2303      	movs	r3, #3
 8000660:	2200      	movs	r2, #0
 8000662:	2105      	movs	r1, #5
 8000664:	9102      	str	r1, [sp, #8]
 8000666:	9201      	str	r2, [sp, #4]
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	4623      	mov	r3, r4
 800066c:	4602      	mov	r2, r0
 800066e:	2105      	movs	r1, #5
 8000670:	486b      	ldr	r0, [pc, #428]	; (8000820 <SPI_Pin+0x1f0>)
 8000672:	f7ff feeb 	bl	800044c <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	b29b      	uxth	r3, r3
 800067c:	2217      	movs	r2, #23
 800067e:	4293      	cmp	r3, r2
 8000680:	d10d      	bne.n	800069e <SPI_Pin+0x6e>
 8000682:	2002      	movs	r0, #2
 8000684:	2400      	movs	r4, #0
 8000686:	2303      	movs	r3, #3
 8000688:	2200      	movs	r2, #0
 800068a:	2105      	movs	r1, #5
 800068c:	9102      	str	r1, [sp, #8]
 800068e:	9201      	str	r2, [sp, #4]
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	4623      	mov	r3, r4
 8000694:	4602      	mov	r2, r0
 8000696:	2103      	movs	r1, #3
 8000698:	4862      	ldr	r0, [pc, #392]	; (8000824 <SPI_Pin+0x1f4>)
 800069a:	f7ff fed7 	bl	800044c <GPIO_Pin_Init>

			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	799b      	ldrb	r3, [r3, #6]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	2210      	movs	r2, #16
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d10d      	bne.n	80006c6 <SPI_Pin+0x96>
 80006aa:	2002      	movs	r0, #2
 80006ac:	2400      	movs	r4, #0
 80006ae:	2303      	movs	r3, #3
 80006b0:	2200      	movs	r2, #0
 80006b2:	2105      	movs	r1, #5
 80006b4:	9102      	str	r1, [sp, #8]
 80006b6:	9201      	str	r2, [sp, #4]
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	4623      	mov	r3, r4
 80006bc:	4602      	mov	r2, r0
 80006be:	2106      	movs	r1, #6
 80006c0:	4857      	ldr	r0, [pc, #348]	; (8000820 <SPI_Pin+0x1f0>)
 80006c2:	f7ff fec3 	bl	800044c <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799b      	ldrb	r3, [r3, #6]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	2218      	movs	r2, #24
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d10d      	bne.n	80006ee <SPI_Pin+0xbe>
 80006d2:	2002      	movs	r0, #2
 80006d4:	2400      	movs	r4, #0
 80006d6:	2303      	movs	r3, #3
 80006d8:	2200      	movs	r2, #0
 80006da:	2105      	movs	r1, #5
 80006dc:	9102      	str	r1, [sp, #8]
 80006de:	9201      	str	r2, [sp, #4]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4623      	mov	r3, r4
 80006e4:	4602      	mov	r2, r0
 80006e6:	2104      	movs	r1, #4
 80006e8:	484e      	ldr	r0, [pc, #312]	; (8000824 <SPI_Pin+0x1f4>)
 80006ea:	f7ff feaf 	bl	800044c <GPIO_Pin_Init>

			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	2211      	movs	r2, #17
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d10d      	bne.n	8000716 <SPI_Pin+0xe6>
 80006fa:	2002      	movs	r0, #2
 80006fc:	2400      	movs	r4, #0
 80006fe:	2303      	movs	r3, #3
 8000700:	2200      	movs	r2, #0
 8000702:	2105      	movs	r1, #5
 8000704:	9102      	str	r1, [sp, #8]
 8000706:	9201      	str	r2, [sp, #4]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	4623      	mov	r3, r4
 800070c:	4602      	mov	r2, r0
 800070e:	2107      	movs	r1, #7
 8000710:	4843      	ldr	r0, [pc, #268]	; (8000820 <SPI_Pin+0x1f0>)
 8000712:	f7ff fe9b 	bl	800044c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	795b      	ldrb	r3, [r3, #5]
 800071a:	b29b      	uxth	r3, r3
 800071c:	2219      	movs	r2, #25
 800071e:	4293      	cmp	r3, r2
 8000720:	d10d      	bne.n	800073e <SPI_Pin+0x10e>
 8000722:	2002      	movs	r0, #2
 8000724:	2400      	movs	r4, #0
 8000726:	2303      	movs	r3, #3
 8000728:	2200      	movs	r2, #0
 800072a:	2105      	movs	r1, #5
 800072c:	9102      	str	r1, [sp, #8]
 800072e:	9201      	str	r2, [sp, #4]
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	4623      	mov	r3, r4
 8000734:	4602      	mov	r2, r0
 8000736:	2105      	movs	r1, #5
 8000738:	483a      	ldr	r0, [pc, #232]	; (8000824 <SPI_Pin+0x1f4>)
 800073a:	f7ff fe87 	bl	800044c <GPIO_Pin_Init>

			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800074c:	601a      	str	r2, [r3, #0]

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
		}
	}
}
 800074e:	e393      	b.n	8000e78 <SPI_Pin+0x848>
		else if(config->mode == 1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	89db      	ldrh	r3, [r3, #14]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d167      	bne.n	8000828 <SPI_Pin+0x1f8>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	b29b      	uxth	r3, r3
 800075e:	220f      	movs	r2, #15
 8000760:	4293      	cmp	r3, r2
 8000762:	d10d      	bne.n	8000780 <SPI_Pin+0x150>
 8000764:	2002      	movs	r0, #2
 8000766:	2400      	movs	r4, #0
 8000768:	2303      	movs	r3, #3
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	9102      	str	r1, [sp, #8]
 8000770:	9201      	str	r2, [sp, #4]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4623      	mov	r3, r4
 8000776:	4602      	mov	r2, r0
 8000778:	2105      	movs	r1, #5
 800077a:	4829      	ldr	r0, [pc, #164]	; (8000820 <SPI_Pin+0x1f0>)
 800077c:	f7ff fe66 	bl	800044c <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	b29b      	uxth	r3, r3
 8000786:	2217      	movs	r2, #23
 8000788:	4293      	cmp	r3, r2
 800078a:	d10d      	bne.n	80007a8 <SPI_Pin+0x178>
 800078c:	2002      	movs	r0, #2
 800078e:	2400      	movs	r4, #0
 8000790:	2303      	movs	r3, #3
 8000792:	2200      	movs	r2, #0
 8000794:	2105      	movs	r1, #5
 8000796:	9102      	str	r1, [sp, #8]
 8000798:	9201      	str	r2, [sp, #4]
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	4623      	mov	r3, r4
 800079e:	4602      	mov	r2, r0
 80007a0:	2103      	movs	r1, #3
 80007a2:	4820      	ldr	r0, [pc, #128]	; (8000824 <SPI_Pin+0x1f4>)
 80007a4:	f7ff fe52 	bl	800044c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	795b      	ldrb	r3, [r3, #5]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	2211      	movs	r2, #17
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d10d      	bne.n	80007d0 <SPI_Pin+0x1a0>
 80007b4:	2002      	movs	r0, #2
 80007b6:	2400      	movs	r4, #0
 80007b8:	2303      	movs	r3, #3
 80007ba:	2200      	movs	r2, #0
 80007bc:	2105      	movs	r1, #5
 80007be:	9102      	str	r1, [sp, #8]
 80007c0:	9201      	str	r2, [sp, #4]
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	4623      	mov	r3, r4
 80007c6:	4602      	mov	r2, r0
 80007c8:	2107      	movs	r1, #7
 80007ca:	4815      	ldr	r0, [pc, #84]	; (8000820 <SPI_Pin+0x1f0>)
 80007cc:	f7ff fe3e 	bl	800044c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	795b      	ldrb	r3, [r3, #5]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	2219      	movs	r2, #25
 80007d8:	4293      	cmp	r3, r2
 80007da:	d10d      	bne.n	80007f8 <SPI_Pin+0x1c8>
 80007dc:	2002      	movs	r0, #2
 80007de:	2400      	movs	r4, #0
 80007e0:	2303      	movs	r3, #3
 80007e2:	2200      	movs	r2, #0
 80007e4:	2105      	movs	r1, #5
 80007e6:	9102      	str	r1, [sp, #8]
 80007e8:	9201      	str	r2, [sp, #4]
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	4623      	mov	r3, r4
 80007ee:	4602      	mov	r2, r0
 80007f0:	2105      	movs	r1, #5
 80007f2:	480c      	ldr	r0, [pc, #48]	; (8000824 <SPI_Pin+0x1f4>)
 80007f4:	f7ff fe2a 	bl	800044c <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000806:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	e32e      	b.n	8000e78 <SPI_Pin+0x848>
 800081a:	bf00      	nop
 800081c:	40013000 	.word	0x40013000
 8000820:	40020000 	.word	0x40020000
 8000824:	40020400 	.word	0x40020400
		else if(config->mode == 2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	89db      	ldrh	r3, [r3, #14]
 800082c:	2b02      	cmp	r3, #2
 800082e:	f040 8323 	bne.w	8000e78 <SPI_Pin+0x848>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	b29b      	uxth	r3, r3
 8000838:	220f      	movs	r2, #15
 800083a:	4293      	cmp	r3, r2
 800083c:	d10d      	bne.n	800085a <SPI_Pin+0x22a>
 800083e:	2002      	movs	r0, #2
 8000840:	2400      	movs	r4, #0
 8000842:	2303      	movs	r3, #3
 8000844:	2200      	movs	r2, #0
 8000846:	2105      	movs	r1, #5
 8000848:	9102      	str	r1, [sp, #8]
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	4623      	mov	r3, r4
 8000850:	4602      	mov	r2, r0
 8000852:	2105      	movs	r1, #5
 8000854:	48a0      	ldr	r0, [pc, #640]	; (8000ad8 <SPI_Pin+0x4a8>)
 8000856:	f7ff fdf9 	bl	800044c <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	b29b      	uxth	r3, r3
 8000860:	2217      	movs	r2, #23
 8000862:	4293      	cmp	r3, r2
 8000864:	d10d      	bne.n	8000882 <SPI_Pin+0x252>
 8000866:	2002      	movs	r0, #2
 8000868:	2400      	movs	r4, #0
 800086a:	2303      	movs	r3, #3
 800086c:	2200      	movs	r2, #0
 800086e:	2105      	movs	r1, #5
 8000870:	9102      	str	r1, [sp, #8]
 8000872:	9201      	str	r2, [sp, #4]
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	4623      	mov	r3, r4
 8000878:	4602      	mov	r2, r0
 800087a:	2103      	movs	r1, #3
 800087c:	4897      	ldr	r0, [pc, #604]	; (8000adc <SPI_Pin+0x4ac>)
 800087e:	f7ff fde5 	bl	800044c <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	799b      	ldrb	r3, [r3, #6]
 8000886:	b29b      	uxth	r3, r3
 8000888:	2210      	movs	r2, #16
 800088a:	4293      	cmp	r3, r2
 800088c:	d10d      	bne.n	80008aa <SPI_Pin+0x27a>
 800088e:	2002      	movs	r0, #2
 8000890:	2400      	movs	r4, #0
 8000892:	2303      	movs	r3, #3
 8000894:	2200      	movs	r2, #0
 8000896:	2105      	movs	r1, #5
 8000898:	9102      	str	r1, [sp, #8]
 800089a:	9201      	str	r2, [sp, #4]
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	4623      	mov	r3, r4
 80008a0:	4602      	mov	r2, r0
 80008a2:	2106      	movs	r1, #6
 80008a4:	488c      	ldr	r0, [pc, #560]	; (8000ad8 <SPI_Pin+0x4a8>)
 80008a6:	f7ff fdd1 	bl	800044c <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	799b      	ldrb	r3, [r3, #6]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	2218      	movs	r2, #24
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d10d      	bne.n	80008d2 <SPI_Pin+0x2a2>
 80008b6:	2002      	movs	r0, #2
 80008b8:	2400      	movs	r4, #0
 80008ba:	2303      	movs	r3, #3
 80008bc:	2200      	movs	r2, #0
 80008be:	2105      	movs	r1, #5
 80008c0:	9102      	str	r1, [sp, #8]
 80008c2:	9201      	str	r2, [sp, #4]
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	4623      	mov	r3, r4
 80008c8:	4602      	mov	r2, r0
 80008ca:	2104      	movs	r1, #4
 80008cc:	4883      	ldr	r0, [pc, #524]	; (8000adc <SPI_Pin+0x4ac>)
 80008ce:	f7ff fdbd 	bl	800044c <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008e0:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80008f0:	601a      	str	r2, [r3, #0]
}
 80008f2:	e2c1      	b.n	8000e78 <SPI_Pin+0x848>
	else if(config -> Port == SPI2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a79      	ldr	r2, [pc, #484]	; (8000ae0 <SPI_Pin+0x4b0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	f040 815a 	bne.w	8000bb4 <SPI_Pin+0x584>
		if(config->mode == 0)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	89db      	ldrh	r3, [r3, #14]
 8000904:	2b00      	cmp	r3, #0
 8000906:	f040 8081 	bne.w	8000a0c <SPI_Pin+0x3dc>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	b29b      	uxth	r3, r3
 8000910:	22d2      	movs	r2, #210	; 0xd2
 8000912:	4293      	cmp	r3, r2
 8000914:	d10d      	bne.n	8000932 <SPI_Pin+0x302>
 8000916:	2002      	movs	r0, #2
 8000918:	2400      	movs	r4, #0
 800091a:	2303      	movs	r3, #3
 800091c:	2200      	movs	r2, #0
 800091e:	2105      	movs	r1, #5
 8000920:	9102      	str	r1, [sp, #8]
 8000922:	9201      	str	r2, [sp, #4]
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	4623      	mov	r3, r4
 8000928:	4602      	mov	r2, r0
 800092a:	210a      	movs	r1, #10
 800092c:	486b      	ldr	r0, [pc, #428]	; (8000adc <SPI_Pin+0x4ac>)
 800092e:	f7ff fd8d 	bl	800044c <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	791b      	ldrb	r3, [r3, #4]
 8000936:	b29b      	uxth	r3, r3
 8000938:	22d5      	movs	r2, #213	; 0xd5
 800093a:	4293      	cmp	r3, r2
 800093c:	d10d      	bne.n	800095a <SPI_Pin+0x32a>
 800093e:	2002      	movs	r0, #2
 8000940:	2400      	movs	r4, #0
 8000942:	2303      	movs	r3, #3
 8000944:	2200      	movs	r2, #0
 8000946:	2105      	movs	r1, #5
 8000948:	9102      	str	r1, [sp, #8]
 800094a:	9201      	str	r2, [sp, #4]
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	4623      	mov	r3, r4
 8000950:	4602      	mov	r2, r0
 8000952:	210d      	movs	r1, #13
 8000954:	4861      	ldr	r0, [pc, #388]	; (8000adc <SPI_Pin+0x4ac>)
 8000956:	f7ff fd79 	bl	800044c <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	799b      	ldrb	r3, [r3, #6]
 800095e:	b29b      	uxth	r3, r3
 8000960:	22d6      	movs	r2, #214	; 0xd6
 8000962:	4293      	cmp	r3, r2
 8000964:	d10d      	bne.n	8000982 <SPI_Pin+0x352>
 8000966:	2002      	movs	r0, #2
 8000968:	2400      	movs	r4, #0
 800096a:	2303      	movs	r3, #3
 800096c:	2200      	movs	r2, #0
 800096e:	2105      	movs	r1, #5
 8000970:	9102      	str	r1, [sp, #8]
 8000972:	9201      	str	r2, [sp, #4]
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	4623      	mov	r3, r4
 8000978:	4602      	mov	r2, r0
 800097a:	210e      	movs	r1, #14
 800097c:	4857      	ldr	r0, [pc, #348]	; (8000adc <SPI_Pin+0x4ac>)
 800097e:	f7ff fd65 	bl	800044c <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	799b      	ldrb	r3, [r3, #6]
 8000986:	b29b      	uxth	r3, r3
 8000988:	2220      	movs	r2, #32
 800098a:	4293      	cmp	r3, r2
 800098c:	d10d      	bne.n	80009aa <SPI_Pin+0x37a>
 800098e:	2002      	movs	r0, #2
 8000990:	2400      	movs	r4, #0
 8000992:	2303      	movs	r3, #3
 8000994:	2200      	movs	r2, #0
 8000996:	2105      	movs	r1, #5
 8000998:	9102      	str	r1, [sp, #8]
 800099a:	9201      	str	r2, [sp, #4]
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	4623      	mov	r3, r4
 80009a0:	4602      	mov	r2, r0
 80009a2:	2102      	movs	r1, #2
 80009a4:	484f      	ldr	r0, [pc, #316]	; (8000ae4 <SPI_Pin+0x4b4>)
 80009a6:	f7ff fd51 	bl	800044c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PB15) GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	795b      	ldrb	r3, [r3, #5]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	22d7      	movs	r2, #215	; 0xd7
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d10d      	bne.n	80009d2 <SPI_Pin+0x3a2>
 80009b6:	2002      	movs	r0, #2
 80009b8:	2400      	movs	r4, #0
 80009ba:	2303      	movs	r3, #3
 80009bc:	2200      	movs	r2, #0
 80009be:	2105      	movs	r1, #5
 80009c0:	9102      	str	r1, [sp, #8]
 80009c2:	9201      	str	r2, [sp, #4]
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	4623      	mov	r3, r4
 80009c8:	4602      	mov	r2, r0
 80009ca:	210f      	movs	r1, #15
 80009cc:	4843      	ldr	r0, [pc, #268]	; (8000adc <SPI_Pin+0x4ac>)
 80009ce:	f7ff fd3d 	bl	800044c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PC3) GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	795b      	ldrb	r3, [r3, #5]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	2221      	movs	r2, #33	; 0x21
 80009da:	4293      	cmp	r3, r2
 80009dc:	d10d      	bne.n	80009fa <SPI_Pin+0x3ca>
 80009de:	2002      	movs	r0, #2
 80009e0:	2400      	movs	r4, #0
 80009e2:	2303      	movs	r3, #3
 80009e4:	2200      	movs	r2, #0
 80009e6:	2105      	movs	r1, #5
 80009e8:	9102      	str	r1, [sp, #8]
 80009ea:	9201      	str	r2, [sp, #4]
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	4623      	mov	r3, r4
 80009f0:	4602      	mov	r2, r0
 80009f2:	2103      	movs	r1, #3
 80009f4:	483b      	ldr	r0, [pc, #236]	; (8000ae4 <SPI_Pin+0x4b4>)
 80009f6:	f7ff fd29 	bl	800044c <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a08:	601a      	str	r2, [r3, #0]
}
 8000a0a:	e235      	b.n	8000e78 <SPI_Pin+0x848>
		else if(config->mode == 1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	89db      	ldrh	r3, [r3, #14]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d169      	bne.n	8000ae8 <SPI_Pin+0x4b8>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	791b      	ldrb	r3, [r3, #4]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	22d2      	movs	r2, #210	; 0xd2
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d10d      	bne.n	8000a3c <SPI_Pin+0x40c>
 8000a20:	2002      	movs	r0, #2
 8000a22:	2400      	movs	r4, #0
 8000a24:	2303      	movs	r3, #3
 8000a26:	2200      	movs	r2, #0
 8000a28:	2105      	movs	r1, #5
 8000a2a:	9102      	str	r1, [sp, #8]
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	4623      	mov	r3, r4
 8000a32:	4602      	mov	r2, r0
 8000a34:	210a      	movs	r1, #10
 8000a36:	4829      	ldr	r0, [pc, #164]	; (8000adc <SPI_Pin+0x4ac>)
 8000a38:	f7ff fd08 	bl	800044c <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	22d5      	movs	r2, #213	; 0xd5
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d10d      	bne.n	8000a64 <SPI_Pin+0x434>
 8000a48:	2002      	movs	r0, #2
 8000a4a:	2400      	movs	r4, #0
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2105      	movs	r1, #5
 8000a52:	9102      	str	r1, [sp, #8]
 8000a54:	9201      	str	r2, [sp, #4]
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	4623      	mov	r3, r4
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	210d      	movs	r1, #13
 8000a5e:	481f      	ldr	r0, [pc, #124]	; (8000adc <SPI_Pin+0x4ac>)
 8000a60:	f7ff fcf4 	bl	800044c <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	791b      	ldrb	r3, [r3, #4]
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	22d2      	movs	r2, #210	; 0xd2
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d10d      	bne.n	8000a8c <SPI_Pin+0x45c>
 8000a70:	2002      	movs	r0, #2
 8000a72:	2400      	movs	r4, #0
 8000a74:	2303      	movs	r3, #3
 8000a76:	2200      	movs	r2, #0
 8000a78:	2105      	movs	r1, #5
 8000a7a:	9102      	str	r1, [sp, #8]
 8000a7c:	9201      	str	r2, [sp, #4]
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	4623      	mov	r3, r4
 8000a82:	4602      	mov	r2, r0
 8000a84:	210a      	movs	r1, #10
 8000a86:	4815      	ldr	r0, [pc, #84]	; (8000adc <SPI_Pin+0x4ac>)
 8000a88:	f7ff fce0 	bl	800044c <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	22d5      	movs	r2, #213	; 0xd5
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d10d      	bne.n	8000ab4 <SPI_Pin+0x484>
 8000a98:	2002      	movs	r0, #2
 8000a9a:	2400      	movs	r4, #0
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	9102      	str	r1, [sp, #8]
 8000aa4:	9201      	str	r2, [sp, #4]
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	4623      	mov	r3, r4
 8000aaa:	4602      	mov	r2, r0
 8000aac:	210d      	movs	r1, #13
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <SPI_Pin+0x4ac>)
 8000ab0:	f7ff fccc 	bl	800044c <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ac2:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	e1d0      	b.n	8000e78 <SPI_Pin+0x848>
 8000ad6:	bf00      	nop
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40003800 	.word	0x40003800
 8000ae4:	40020800 	.word	0x40020800
		else if(config->mode == 2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	89db      	ldrh	r3, [r3, #14]
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	f040 81c3 	bne.w	8000e78 <SPI_Pin+0x848>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	791b      	ldrb	r3, [r3, #4]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	22d2      	movs	r2, #210	; 0xd2
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10d      	bne.n	8000b1a <SPI_Pin+0x4ea>
 8000afe:	2002      	movs	r0, #2
 8000b00:	2400      	movs	r4, #0
 8000b02:	2303      	movs	r3, #3
 8000b04:	2200      	movs	r2, #0
 8000b06:	2105      	movs	r1, #5
 8000b08:	9102      	str	r1, [sp, #8]
 8000b0a:	9201      	str	r2, [sp, #4]
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	4623      	mov	r3, r4
 8000b10:	4602      	mov	r2, r0
 8000b12:	210a      	movs	r1, #10
 8000b14:	48a2      	ldr	r0, [pc, #648]	; (8000da0 <SPI_Pin+0x770>)
 8000b16:	f7ff fc99 	bl	800044c <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	791b      	ldrb	r3, [r3, #4]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	22d5      	movs	r2, #213	; 0xd5
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d10d      	bne.n	8000b42 <SPI_Pin+0x512>
 8000b26:	2002      	movs	r0, #2
 8000b28:	2400      	movs	r4, #0
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2105      	movs	r1, #5
 8000b30:	9102      	str	r1, [sp, #8]
 8000b32:	9201      	str	r2, [sp, #4]
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	4623      	mov	r3, r4
 8000b38:	4602      	mov	r2, r0
 8000b3a:	210d      	movs	r1, #13
 8000b3c:	4898      	ldr	r0, [pc, #608]	; (8000da0 <SPI_Pin+0x770>)
 8000b3e:	f7ff fc85 	bl	800044c <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	799b      	ldrb	r3, [r3, #6]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	22d6      	movs	r2, #214	; 0xd6
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d10d      	bne.n	8000b6a <SPI_Pin+0x53a>
 8000b4e:	2002      	movs	r0, #2
 8000b50:	2400      	movs	r4, #0
 8000b52:	2303      	movs	r3, #3
 8000b54:	2200      	movs	r2, #0
 8000b56:	2105      	movs	r1, #5
 8000b58:	9102      	str	r1, [sp, #8]
 8000b5a:	9201      	str	r2, [sp, #4]
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	4623      	mov	r3, r4
 8000b60:	4602      	mov	r2, r0
 8000b62:	210e      	movs	r1, #14
 8000b64:	488e      	ldr	r0, [pc, #568]	; (8000da0 <SPI_Pin+0x770>)
 8000b66:	f7ff fc71 	bl	800044c <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	799b      	ldrb	r3, [r3, #6]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	2220      	movs	r2, #32
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d10d      	bne.n	8000b92 <SPI_Pin+0x562>
 8000b76:	2002      	movs	r0, #2
 8000b78:	2400      	movs	r4, #0
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2105      	movs	r1, #5
 8000b80:	9102      	str	r1, [sp, #8]
 8000b82:	9201      	str	r2, [sp, #4]
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	4623      	mov	r3, r4
 8000b88:	4602      	mov	r2, r0
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	4885      	ldr	r0, [pc, #532]	; (8000da4 <SPI_Pin+0x774>)
 8000b8e:	f7ff fc5d 	bl	800044c <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ba0:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000bb0:	601a      	str	r2, [r3, #0]
}
 8000bb2:	e161      	b.n	8000e78 <SPI_Pin+0x848>
	else if(config -> Port == SPI3)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a7b      	ldr	r2, [pc, #492]	; (8000da8 <SPI_Pin+0x778>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	f040 815c 	bne.w	8000e78 <SPI_Pin+0x848>
		if(config->mode == 0)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	89db      	ldrh	r3, [r3, #14]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 8084 	bne.w	8000cd2 <SPI_Pin+0x6a2>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	2217      	movs	r2, #23
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d10d      	bne.n	8000bf2 <SPI_Pin+0x5c2>
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	2400      	movs	r4, #0
 8000bda:	2303      	movs	r3, #3
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2106      	movs	r1, #6
 8000be0:	9102      	str	r1, [sp, #8]
 8000be2:	9201      	str	r2, [sp, #4]
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	4623      	mov	r3, r4
 8000be8:	4602      	mov	r2, r0
 8000bea:	2103      	movs	r1, #3
 8000bec:	486c      	ldr	r0, [pc, #432]	; (8000da0 <SPI_Pin+0x770>)
 8000bee:	f7ff fc2d 	bl	800044c <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d10d      	bne.n	8000c1c <SPI_Pin+0x5ec>
 8000c00:	2002      	movs	r0, #2
 8000c02:	2400      	movs	r4, #0
 8000c04:	2303      	movs	r3, #3
 8000c06:	2200      	movs	r2, #0
 8000c08:	2106      	movs	r1, #6
 8000c0a:	9102      	str	r1, [sp, #8]
 8000c0c:	9201      	str	r2, [sp, #4]
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	4623      	mov	r3, r4
 8000c12:	4602      	mov	r2, r0
 8000c14:	210a      	movs	r1, #10
 8000c16:	4863      	ldr	r0, [pc, #396]	; (8000da4 <SPI_Pin+0x774>)
 8000c18:	f7ff fc18 	bl	800044c <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	799b      	ldrb	r3, [r3, #6]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	2218      	movs	r2, #24
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d10d      	bne.n	8000c44 <SPI_Pin+0x614>
 8000c28:	2002      	movs	r0, #2
 8000c2a:	2400      	movs	r4, #0
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2106      	movs	r1, #6
 8000c32:	9102      	str	r1, [sp, #8]
 8000c34:	9201      	str	r2, [sp, #4]
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	4623      	mov	r3, r4
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4858      	ldr	r0, [pc, #352]	; (8000da0 <SPI_Pin+0x770>)
 8000c40:	f7ff fc04 	bl	800044c <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	799b      	ldrb	r3, [r3, #6]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	f240 1237 	movw	r2, #311	; 0x137
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d10d      	bne.n	8000c6e <SPI_Pin+0x63e>
 8000c52:	2002      	movs	r0, #2
 8000c54:	2400      	movs	r4, #0
 8000c56:	2303      	movs	r3, #3
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2106      	movs	r1, #6
 8000c5c:	9102      	str	r1, [sp, #8]
 8000c5e:	9201      	str	r2, [sp, #4]
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	4623      	mov	r3, r4
 8000c64:	4602      	mov	r2, r0
 8000c66:	210b      	movs	r1, #11
 8000c68:	484e      	ldr	r0, [pc, #312]	; (8000da4 <SPI_Pin+0x774>)
 8000c6a:	f7ff fbef 	bl	800044c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	795b      	ldrb	r3, [r3, #5]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	2219      	movs	r2, #25
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d10d      	bne.n	8000c96 <SPI_Pin+0x666>
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	2400      	movs	r4, #0
 8000c7e:	2303      	movs	r3, #3
 8000c80:	2200      	movs	r2, #0
 8000c82:	2106      	movs	r1, #6
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9201      	str	r2, [sp, #4]
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	2105      	movs	r1, #5
 8000c90:	4843      	ldr	r0, [pc, #268]	; (8000da0 <SPI_Pin+0x770>)
 8000c92:	f7ff fbdb 	bl	800044c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	795b      	ldrb	r3, [r3, #5]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d10d      	bne.n	8000cc0 <SPI_Pin+0x690>
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	2303      	movs	r3, #3
 8000caa:	2200      	movs	r2, #0
 8000cac:	2106      	movs	r1, #6
 8000cae:	9102      	str	r1, [sp, #8]
 8000cb0:	9201      	str	r2, [sp, #4]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4623      	mov	r3, r4
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	210c      	movs	r1, #12
 8000cba:	483a      	ldr	r0, [pc, #232]	; (8000da4 <SPI_Pin+0x774>)
 8000cbc:	f7ff fbc6 	bl	800044c <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	e0d2      	b.n	8000e78 <SPI_Pin+0x848>
		else if(config->mode == 1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	89db      	ldrh	r3, [r3, #14]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d168      	bne.n	8000dac <SPI_Pin+0x77c>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	791b      	ldrb	r3, [r3, #4]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	2217      	movs	r2, #23
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d10d      	bne.n	8000d02 <SPI_Pin+0x6d2>
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	2400      	movs	r4, #0
 8000cea:	2303      	movs	r3, #3
 8000cec:	2200      	movs	r2, #0
 8000cee:	2106      	movs	r1, #6
 8000cf0:	9102      	str	r1, [sp, #8]
 8000cf2:	9201      	str	r2, [sp, #4]
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	4623      	mov	r3, r4
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	4828      	ldr	r0, [pc, #160]	; (8000da0 <SPI_Pin+0x770>)
 8000cfe:	f7ff fba5 	bl	800044c <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	791b      	ldrb	r3, [r3, #4]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d10d      	bne.n	8000d2c <SPI_Pin+0x6fc>
 8000d10:	2002      	movs	r0, #2
 8000d12:	2400      	movs	r4, #0
 8000d14:	2303      	movs	r3, #3
 8000d16:	2200      	movs	r2, #0
 8000d18:	2106      	movs	r1, #6
 8000d1a:	9102      	str	r1, [sp, #8]
 8000d1c:	9201      	str	r2, [sp, #4]
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	4623      	mov	r3, r4
 8000d22:	4602      	mov	r2, r0
 8000d24:	210a      	movs	r1, #10
 8000d26:	481f      	ldr	r0, [pc, #124]	; (8000da4 <SPI_Pin+0x774>)
 8000d28:	f7ff fb90 	bl	800044c <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	799b      	ldrb	r3, [r3, #6]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	2218      	movs	r2, #24
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d10d      	bne.n	8000d54 <SPI_Pin+0x724>
 8000d38:	2002      	movs	r0, #2
 8000d3a:	2400      	movs	r4, #0
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2106      	movs	r1, #6
 8000d42:	9102      	str	r1, [sp, #8]
 8000d44:	9201      	str	r2, [sp, #4]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	4623      	mov	r3, r4
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	4814      	ldr	r0, [pc, #80]	; (8000da0 <SPI_Pin+0x770>)
 8000d50:	f7ff fb7c 	bl	800044c <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	799b      	ldrb	r3, [r3, #6]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	f240 1237 	movw	r2, #311	; 0x137
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10d      	bne.n	8000d7e <SPI_Pin+0x74e>
 8000d62:	2002      	movs	r0, #2
 8000d64:	2400      	movs	r4, #0
 8000d66:	2303      	movs	r3, #3
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2106      	movs	r1, #6
 8000d6c:	9102      	str	r1, [sp, #8]
 8000d6e:	9201      	str	r2, [sp, #4]
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	4623      	mov	r3, r4
 8000d74:	4602      	mov	r2, r0
 8000d76:	210b      	movs	r1, #11
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <SPI_Pin+0x774>)
 8000d7a:	f7ff fb67 	bl	800044c <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d8c:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d9c:	601a      	str	r2, [r3, #0]
}
 8000d9e:	e06b      	b.n	8000e78 <SPI_Pin+0x848>
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40003c00 	.word	0x40003c00
		else if(config->mode == 2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	89db      	ldrh	r3, [r3, #14]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d161      	bne.n	8000e78 <SPI_Pin+0x848>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	791b      	ldrb	r3, [r3, #4]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	2217      	movs	r2, #23
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d10d      	bne.n	8000ddc <SPI_Pin+0x7ac>
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	2400      	movs	r4, #0
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2106      	movs	r1, #6
 8000dca:	9102      	str	r1, [sp, #8]
 8000dcc:	9201      	str	r2, [sp, #4]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	4623      	mov	r3, r4
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	482a      	ldr	r0, [pc, #168]	; (8000e80 <SPI_Pin+0x850>)
 8000dd8:	f7ff fb38 	bl	800044c <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	791b      	ldrb	r3, [r3, #4]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10d      	bne.n	8000e06 <SPI_Pin+0x7d6>
 8000dea:	2002      	movs	r0, #2
 8000dec:	2400      	movs	r4, #0
 8000dee:	2303      	movs	r3, #3
 8000df0:	2200      	movs	r2, #0
 8000df2:	2106      	movs	r1, #6
 8000df4:	9102      	str	r1, [sp, #8]
 8000df6:	9201      	str	r2, [sp, #4]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	210a      	movs	r1, #10
 8000e00:	4820      	ldr	r0, [pc, #128]	; (8000e84 <SPI_Pin+0x854>)
 8000e02:	f7ff fb23 	bl	800044c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	2219      	movs	r2, #25
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d10d      	bne.n	8000e2e <SPI_Pin+0x7fe>
 8000e12:	2002      	movs	r0, #2
 8000e14:	2400      	movs	r4, #0
 8000e16:	2303      	movs	r3, #3
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2106      	movs	r1, #6
 8000e1c:	9102      	str	r1, [sp, #8]
 8000e1e:	9201      	str	r2, [sp, #4]
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	4623      	mov	r3, r4
 8000e24:	4602      	mov	r2, r0
 8000e26:	2105      	movs	r1, #5
 8000e28:	4815      	ldr	r0, [pc, #84]	; (8000e80 <SPI_Pin+0x850>)
 8000e2a:	f7ff fb0f 	bl	800044c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	795b      	ldrb	r3, [r3, #5]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d10d      	bne.n	8000e58 <SPI_Pin+0x828>
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	2400      	movs	r4, #0
 8000e40:	2303      	movs	r3, #3
 8000e42:	2200      	movs	r2, #0
 8000e44:	2106      	movs	r1, #6
 8000e46:	9102      	str	r1, [sp, #8]
 8000e48:	9201      	str	r2, [sp, #4]
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	4623      	mov	r3, r4
 8000e4e:	4602      	mov	r2, r0
 8000e50:	210c      	movs	r1, #12
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <SPI_Pin+0x854>)
 8000e54:	f7ff fafa 	bl	800044c <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e66:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020800 	.word	0x40020800

08000e88 <SPI_Init>:


void SPI_Init(SPI_Config *config)
{
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	6078      	str	r0, [r7, #4]
	if(config->type == SPI_Type.Master)GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	8b1b      	ldrh	r3, [r3, #24]
 8000e94:	2204      	movs	r2, #4
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10f      	bne.n	8000eba <SPI_Init+0x32>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6898      	ldr	r0, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7b19      	ldrb	r1, [r3, #12]
 8000ea2:	2501      	movs	r5, #1
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2400      	movs	r4, #0
 8000eac:	9402      	str	r4, [sp, #8]
 8000eae:	9201      	str	r2, [sp, #4]
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	4633      	mov	r3, r6
 8000eb4:	462a      	mov	r2, r5
 8000eb6:	f7ff fac9 	bl	800044c <GPIO_Pin_Init>
	if(config->type == SPI_Type.Slave)GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.Input, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	8b1b      	ldrh	r3, [r3, #24]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d10f      	bne.n	8000ee4 <SPI_Init+0x5c>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6898      	ldr	r0, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7b19      	ldrb	r1, [r3, #12]
 8000ecc:	2500      	movs	r5, #0
 8000ece:	2600      	movs	r6, #0
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2400      	movs	r4, #0
 8000ed6:	9402      	str	r4, [sp, #8]
 8000ed8:	9201      	str	r2, [sp, #4]
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	4633      	mov	r3, r6
 8000ede:	462a      	mov	r2, r5
 8000ee0:	f7ff fab4 	bl	800044c <GPIO_Pin_Init>

	SPI_Clock_Enable(config);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fb05 	bl	80004f4 <SPI_Clock_Enable>
	SPI_Pin(config);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff fba0 	bl	8000630 <SPI_Pin>

	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	8b99      	ldrh	r1, [r3, #28]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	8b5b      	ldrh	r3, [r3, #26]
					config->type | config->frame_format |
					config->data_format | config->crc | (config->prescaler<<3);
 8000efe:	430b      	orrs	r3, r1
 8000f00:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	8b1b      	ldrh	r3, [r3, #24]
					config->data_format | config->crc | (config->prescaler<<3);
 8000f06:	430b      	orrs	r3, r1
 8000f08:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	8a9b      	ldrh	r3, [r3, #20]
					config->data_format | config->crc | (config->prescaler<<3);
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	b299      	uxth	r1, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	8a5b      	ldrh	r3, [r3, #18]
 8000f16:	430b      	orrs	r3, r1
 8000f18:	b299      	uxth	r1, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	8a1b      	ldrh	r3, [r3, #16]
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4619      	mov	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	8adb      	ldrh	r3, [r3, #22]
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	4619      	mov	r1, r3
	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
	config->Port->CR2 |= config->dma | config->interrupt;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	8c19      	ldrh	r1, [r3, #32]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	8bdb      	ldrh	r3, [r3, #30]
 8000f44:	430b      	orrs	r3, r1
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	605a      	str	r2, [r3, #4]

	if(config->Port == SPI1)config->speed = (SystemCoreClock/2)/(2*2^(config->prescaler));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a82      	ldr	r2, [pc, #520]	; (8001160 <SPI_Init+0x2d8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d10c      	bne.n	8000f76 <SPI_Init+0xee>
 8000f5c:	4b81      	ldr	r3, [pc, #516]	; (8001164 <SPI_Init+0x2dc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	085b      	lsrs	r3, r3, #1
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	8ad2      	ldrh	r2, [r2, #22]
 8000f66:	f082 0204 	eor.w	r2, r2, #4
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24
 8000f74:	e00b      	b.n	8000f8e <SPI_Init+0x106>
	else config->speed = (SystemCoreClock/4)/(2*2^(config->prescaler));
 8000f76:	4b7b      	ldr	r3, [pc, #492]	; (8001164 <SPI_Init+0x2dc>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	8ad2      	ldrh	r2, [r2, #22]
 8000f80:	f082 0204 	eor.w	r2, r2, #4
 8000f84:	b292      	uxth	r2, r2
 8000f86:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24

	config->Port -> CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000f9c:	601a      	str	r2, [r3, #0]


	if(config->dma |= SPI_DMA.RX_DMA_Enable)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	8c1a      	ldrh	r2, [r3, #32]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	841a      	strh	r2, [r3, #32]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	8c1b      	ldrh	r3, [r3, #32]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d076      	beq.n	80010a4 <SPI_Init+0x21c>
	{
		if(config->Port == SPI1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a69      	ldr	r2, [pc, #420]	; (8001160 <SPI_Init+0x2d8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d122      	bne.n	8001006 <SPI_Init+0x17e>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI1_RX;
 8000fc0:	4a69      	ldr	r2, [pc, #420]	; (8001168 <SPI_Init+0x2e0>)
 8000fc2:	4b6a      	ldr	r3, [pc, #424]	; (800116c <SPI_Init+0x2e4>)
 8000fc4:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA2;
 8000fc6:	4b69      	ldr	r3, [pc, #420]	; (800116c <SPI_Init+0x2e4>)
 8000fc8:	4a69      	ldr	r2, [pc, #420]	; (8001170 <SPI_Init+0x2e8>)
 8000fca:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI1_DMA_Channel;
 8000fcc:	2203      	movs	r2, #3
 8000fce:	4b67      	ldr	r3, [pc, #412]	; (800116c <SPI_Init+0x2e4>)
 8000fd0:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4b65      	ldr	r3, [pc, #404]	; (800116c <SPI_Init+0x2e4>)
 8000fd6:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8000fd8:	2220      	movs	r2, #32
 8000fda:	4b64      	ldr	r3, [pc, #400]	; (800116c <SPI_Init+0x2e4>)
 8000fdc:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 8000fde:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe2:	4b62      	ldr	r3, [pc, #392]	; (800116c <SPI_Init+0x2e4>)
 8000fe4:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4b60      	ldr	r3, [pc, #384]	; (800116c <SPI_Init+0x2e4>)
 8000fea:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8000fec:	2200      	movs	r2, #0
 8000fee:	4b5f      	ldr	r3, [pc, #380]	; (800116c <SPI_Init+0x2e4>)
 8000ff0:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4b5d      	ldr	r3, [pc, #372]	; (800116c <SPI_Init+0x2e4>)
 8000ff6:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4b5c      	ldr	r3, [pc, #368]	; (800116c <SPI_Init+0x2e4>)
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
			DMA_Init(&xDMA_RX);
 8000ffe:	485b      	ldr	r0, [pc, #364]	; (800116c <SPI_Init+0x2e4>)
 8001000:	f7ff f950 	bl	80002a4 <DMA_Init>
 8001004:	e04e      	b.n	80010a4 <SPI_Init+0x21c>
		}
		else if(config->Port == SPI2)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a5a      	ldr	r2, [pc, #360]	; (8001174 <SPI_Init+0x2ec>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d122      	bne.n	8001056 <SPI_Init+0x1ce>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI2_RX;
 8001010:	4a59      	ldr	r2, [pc, #356]	; (8001178 <SPI_Init+0x2f0>)
 8001012:	4b56      	ldr	r3, [pc, #344]	; (800116c <SPI_Init+0x2e4>)
 8001014:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA1;
 8001016:	4b55      	ldr	r3, [pc, #340]	; (800116c <SPI_Init+0x2e4>)
 8001018:	4a58      	ldr	r2, [pc, #352]	; (800117c <SPI_Init+0x2f4>)
 800101a:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI2_DMA_Channel;
 800101c:	2200      	movs	r2, #0
 800101e:	4b53      	ldr	r3, [pc, #332]	; (800116c <SPI_Init+0x2e4>)
 8001020:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 8001022:	2200      	movs	r2, #0
 8001024:	4b51      	ldr	r3, [pc, #324]	; (800116c <SPI_Init+0x2e4>)
 8001026:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8001028:	2220      	movs	r2, #32
 800102a:	4b50      	ldr	r3, [pc, #320]	; (800116c <SPI_Init+0x2e4>)
 800102c:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 800102e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001032:	4b4e      	ldr	r3, [pc, #312]	; (800116c <SPI_Init+0x2e4>)
 8001034:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 8001036:	2200      	movs	r2, #0
 8001038:	4b4c      	ldr	r3, [pc, #304]	; (800116c <SPI_Init+0x2e4>)
 800103a:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 800103c:	2200      	movs	r2, #0
 800103e:	4b4b      	ldr	r3, [pc, #300]	; (800116c <SPI_Init+0x2e4>)
 8001040:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8001042:	2200      	movs	r2, #0
 8001044:	4b49      	ldr	r3, [pc, #292]	; (800116c <SPI_Init+0x2e4>)
 8001046:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 8001048:	2200      	movs	r2, #0
 800104a:	4b48      	ldr	r3, [pc, #288]	; (800116c <SPI_Init+0x2e4>)
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
			DMA_Init(&xDMA_RX);
 800104e:	4847      	ldr	r0, [pc, #284]	; (800116c <SPI_Init+0x2e4>)
 8001050:	f7ff f928 	bl	80002a4 <DMA_Init>
 8001054:	e026      	b.n	80010a4 <SPI_Init+0x21c>
		}
		else if(config->Port == SPI3)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a49      	ldr	r2, [pc, #292]	; (8001180 <SPI_Init+0x2f8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d121      	bne.n	80010a4 <SPI_Init+0x21c>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI3_RX;
 8001060:	4a48      	ldr	r2, [pc, #288]	; (8001184 <SPI_Init+0x2fc>)
 8001062:	4b42      	ldr	r3, [pc, #264]	; (800116c <SPI_Init+0x2e4>)
 8001064:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA1;
 8001066:	4b41      	ldr	r3, [pc, #260]	; (800116c <SPI_Init+0x2e4>)
 8001068:	4a44      	ldr	r2, [pc, #272]	; (800117c <SPI_Init+0x2f4>)
 800106a:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI3_DMA_Channel;
 800106c:	2200      	movs	r2, #0
 800106e:	4b3f      	ldr	r3, [pc, #252]	; (800116c <SPI_Init+0x2e4>)
 8001070:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 8001072:	2200      	movs	r2, #0
 8001074:	4b3d      	ldr	r3, [pc, #244]	; (800116c <SPI_Init+0x2e4>)
 8001076:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8001078:	2220      	movs	r2, #32
 800107a:	4b3c      	ldr	r3, [pc, #240]	; (800116c <SPI_Init+0x2e4>)
 800107c:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 800107e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <SPI_Init+0x2e4>)
 8001084:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 8001086:	2200      	movs	r2, #0
 8001088:	4b38      	ldr	r3, [pc, #224]	; (800116c <SPI_Init+0x2e4>)
 800108a:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 800108c:	2200      	movs	r2, #0
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <SPI_Init+0x2e4>)
 8001090:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8001092:	2200      	movs	r2, #0
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <SPI_Init+0x2e4>)
 8001096:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 8001098:	2200      	movs	r2, #0
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <SPI_Init+0x2e4>)
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
			DMA_Init(&xDMA_RX);
 800109e:	4833      	ldr	r0, [pc, #204]	; (800116c <SPI_Init+0x2e4>)
 80010a0:	f7ff f900 	bl	80002a4 <DMA_Init>
		}
	}
	if(config->dma |= SPI_DMA.TX_DMA_Enable)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	8c1a      	ldrh	r2, [r3, #32]
 80010a8:	2302      	movs	r3, #2
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	841a      	strh	r2, [r3, #32]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	8c1b      	ldrh	r3, [r3, #32]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 8092 	beq.w	80011e2 <SPI_Init+0x35a>
	{
		if(config->Port == SPI1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a27      	ldr	r2, [pc, #156]	; (8001160 <SPI_Init+0x2d8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d122      	bne.n	800110e <SPI_Init+0x286>
		{
			xDMA_TX.stream = SPI_DMA_Stream.SPI1_TX;
 80010c8:	4a2f      	ldr	r2, [pc, #188]	; (8001188 <SPI_Init+0x300>)
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <SPI_Init+0x304>)
 80010cc:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA2;
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <SPI_Init+0x304>)
 80010d0:	4a27      	ldr	r2, [pc, #156]	; (8001170 <SPI_Init+0x2e8>)
 80010d2:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI1_DMA_Channel;
 80010d4:	2203      	movs	r2, #3
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <SPI_Init+0x304>)
 80010d8:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 80010da:	2200      	movs	r2, #0
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <SPI_Init+0x304>)
 80010de:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 80010e0:	2220      	movs	r2, #32
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <SPI_Init+0x304>)
 80010e4:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 80010e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <SPI_Init+0x304>)
 80010ec:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 80010ee:	2200      	movs	r2, #0
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <SPI_Init+0x304>)
 80010f2:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 80010f4:	2200      	movs	r2, #0
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <SPI_Init+0x304>)
 80010f8:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 80010fa:	2200      	movs	r2, #0
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <SPI_Init+0x304>)
 80010fe:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 8001100:	2200      	movs	r2, #0
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <SPI_Init+0x304>)
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
			DMA_Init(&xDMA_TX);
 8001106:	4821      	ldr	r0, [pc, #132]	; (800118c <SPI_Init+0x304>)
 8001108:	f7ff f8cc 	bl	80002a4 <DMA_Init>
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
			DMA_Init(&xDMA_TX);
		}
	}
}
 800110c:	e069      	b.n	80011e2 <SPI_Init+0x35a>
		else if(config->Port == SPI2)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a18      	ldr	r2, [pc, #96]	; (8001174 <SPI_Init+0x2ec>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d13d      	bne.n	8001194 <SPI_Init+0x30c>
			xDMA_TX.stream = SPI_DMA_Stream.SPI2_TX;
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <SPI_Init+0x308>)
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <SPI_Init+0x304>)
 800111c:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA1;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <SPI_Init+0x304>)
 8001120:	4a16      	ldr	r2, [pc, #88]	; (800117c <SPI_Init+0x2f4>)
 8001122:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI2_DMA_Channel;
 8001124:	2200      	movs	r2, #0
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <SPI_Init+0x304>)
 8001128:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 800112a:	2200      	movs	r2, #0
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <SPI_Init+0x304>)
 800112e:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8001130:	2220      	movs	r2, #32
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <SPI_Init+0x304>)
 8001134:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 8001136:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <SPI_Init+0x304>)
 800113c:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 800113e:	2200      	movs	r2, #0
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <SPI_Init+0x304>)
 8001142:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8001144:	2200      	movs	r2, #0
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <SPI_Init+0x304>)
 8001148:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 800114a:	2200      	movs	r2, #0
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <SPI_Init+0x304>)
 800114e:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 8001150:	2200      	movs	r2, #0
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <SPI_Init+0x304>)
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
			DMA_Init(&xDMA_TX);
 8001156:	480d      	ldr	r0, [pc, #52]	; (800118c <SPI_Init+0x304>)
 8001158:	f7ff f8a4 	bl	80002a4 <DMA_Init>
}
 800115c:	e041      	b.n	80011e2 <SPI_Init+0x35a>
 800115e:	bf00      	nop
 8001160:	40013000 	.word	0x40013000
 8001164:	20000000 	.word	0x20000000
 8001168:	40026410 	.word	0x40026410
 800116c:	20000054 	.word	0x20000054
 8001170:	40026400 	.word	0x40026400
 8001174:	40003800 	.word	0x40003800
 8001178:	40026058 	.word	0x40026058
 800117c:	40026000 	.word	0x40026000
 8001180:	40003c00 	.word	0x40003c00
 8001184:	40026040 	.word	0x40026040
 8001188:	40026458 	.word	0x40026458
 800118c:	20000020 	.word	0x20000020
 8001190:	40026070 	.word	0x40026070
		else if(config->Port == SPI3)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <SPI_Init+0x364>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d121      	bne.n	80011e2 <SPI_Init+0x35a>
			xDMA_TX.stream = SPI_DMA_Stream.SPI3_TX;
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <SPI_Init+0x368>)
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <SPI_Init+0x36c>)
 80011a2:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA1;
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <SPI_Init+0x36c>)
 80011a6:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <SPI_Init+0x370>)
 80011a8:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI3_DMA_Channel;
 80011aa:	2200      	movs	r2, #0
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <SPI_Init+0x36c>)
 80011ae:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 80011b0:	2200      	movs	r2, #0
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <SPI_Init+0x36c>)
 80011b4:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 80011b6:	2220      	movs	r2, #32
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <SPI_Init+0x36c>)
 80011ba:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 80011bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <SPI_Init+0x36c>)
 80011c2:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 80011c4:	2200      	movs	r2, #0
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <SPI_Init+0x36c>)
 80011c8:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 80011ca:	2200      	movs	r2, #0
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <SPI_Init+0x36c>)
 80011ce:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 80011d0:	2200      	movs	r2, #0
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <SPI_Init+0x36c>)
 80011d4:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 80011d6:	2200      	movs	r2, #0
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <SPI_Init+0x36c>)
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
			DMA_Init(&xDMA_TX);
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <SPI_Init+0x36c>)
 80011de:	f7ff f861 	bl	80002a4 <DMA_Init>
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40003c00 	.word	0x40003c00
 80011f0:	400260b8 	.word	0x400260b8
 80011f4:	20000020 	.word	0x20000020
 80011f8:	40026000 	.word	0x40026000

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ffc2 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 800129a:	2304      	movs	r3, #4
 800129c:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 800129e:	23a8      	movs	r3, #168	; 0xa8
 80012a0:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 80012a6:	2307      	movs	r3, #7
 80012a8:	713b      	strb	r3, [r7, #4]

	RCC->PLLCFGR = 0x00000000;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80012b0:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a3a      	ldr	r2, [pc, #232]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 80012b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80012bc:	bf00      	nop
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a34      	ldr	r2, [pc, #208]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
	PWR ->CR |= PWR_CR_VOS;
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <MCU_Clock_Setup+0x110>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <MCU_Clock_Setup+0x110>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MCU_Clock_Setup+0x114>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <MCU_Clock_Setup+0x114>)
 80012e8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ec:	f043 0305 	orr.w	r3, r3, #5
 80012f0:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	793a      	ldrb	r2, [r7, #4]
 80012f8:	0611      	lsls	r1, r2, #24
 80012fa:	797a      	ldrb	r2, [r7, #5]
 80012fc:	0412      	lsls	r2, r2, #16
 80012fe:	4311      	orrs	r1, r2
 8001300:	79ba      	ldrb	r2, [r7, #6]
 8001302:	0192      	lsls	r2, r2, #6
 8001304:	4311      	orrs	r1, r2
 8001306:	79fa      	ldrb	r2, [r7, #7]
 8001308:	430a      	orrs	r2, r1
 800130a:	4611      	mov	r1, r2
 800130c:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 800130e:	430b      	orrs	r3, r1
 8001310:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 8001318:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800131c:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 8001320:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 800132c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001330:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 8001338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800133c:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 8001344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001348:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 800134a:	bf00      	nop
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f9      	beq.n	800134c <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8001364:	bf00      	nop
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b08      	cmp	r3, #8
 8001370:	d1f9      	bne.n	8001366 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 8001372:	f000 f8ad 	bl	80014d0 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MCU_Clock_Setup+0x118>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	08db      	lsrs	r3, r3, #3
 800137c:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <MCU_Clock_Setup+0x11c>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff63 	bl	8001250 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <MCU_Clock_Setup+0x10c>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000
 80013a8:	40023c00 	.word	0x40023c00
 80013ac:	20000000 	.word	0x20000000
 80013b0:	18618619 	.word	0x18618619

080013b4 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <Delay_Config+0x2c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <Delay_Config+0x2c>)
 80013c0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80013c4:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <Delay_Config+0x2c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <Delay_Config+0x2c>)
 80013ce:	2205      	movs	r2, #5
 80013d0:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <main>:

const uint8_t array[5] = {0x00,0x01,0x02,0x03,0x04};


int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 80013e8:	f7ff ff54 	bl	8001294 <MCU_Clock_Setup>
	Delay_Config();
 80013ec:	f7ff ffe2 	bl	80013b4 <Delay_Config>

	SPI_Config_Reset(&xSPI);
 80013f0:	4827      	ldr	r0, [pc, #156]	; (8001490 <main+0xac>)
 80013f2:	f7ff f8b9 	bl	8000568 <SPI_Config_Reset>

	xSPI.Port = SPI1;
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <main+0xac>)
 80013f8:	4a26      	ldr	r2, [pc, #152]	; (8001494 <main+0xb0>)
 80013fa:	601a      	str	r2, [r3, #0]
	xSPI.clock_pin = SPI1_CLK.PA5;
 80013fc:	230f      	movs	r3, #15
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b23      	ldr	r3, [pc, #140]	; (8001490 <main+0xac>)
 8001402:	711a      	strb	r2, [r3, #4]
	xSPI.miso_pin = SPI1_MISO.PA6;
 8001404:	2310      	movs	r3, #16
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <main+0xac>)
 800140a:	719a      	strb	r2, [r3, #6]
	xSPI.mosi_pin = SPI1_MOSI.PA7;
 800140c:	2311      	movs	r3, #17
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <main+0xac>)
 8001412:	715a      	strb	r2, [r3, #5]
	xSPI.NSS_Port = GPIOA;
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <main+0xac>)
 8001416:	4a20      	ldr	r2, [pc, #128]	; (8001498 <main+0xb4>)
 8001418:	609a      	str	r2, [r3, #8]
	xSPI.NSS_Pin = 4;
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <main+0xac>)
 800141c:	2204      	movs	r2, #4
 800141e:	731a      	strb	r2, [r3, #12]
	xSPI.prescaler = SPI_Prescaler.CLK_div_8;
 8001420:	2202      	movs	r2, #2
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <main+0xac>)
 8001424:	82da      	strh	r2, [r3, #22]
	SPI_Init(&xSPI);
 8001426:	481a      	ldr	r0, [pc, #104]	; (8001490 <main+0xac>)
 8001428:	f7ff fd2e 	bl	8000e88 <SPI_Init>


	xDMA.stream = SPI_DMA_Stream.SPI1_RX;
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <main+0xb8>)
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <main+0xbc>)
 8001430:	605a      	str	r2, [r3, #4]
	xDMA.controller = DMA2;
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <main+0xbc>)
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <main+0xc0>)
 8001436:	601a      	str	r2, [r3, #0]
	xDMA.channel = SPI_DMA_Stream.SPI1_DMA_Channel;
 8001438:	2203      	movs	r2, #3
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <main+0xbc>)
 800143c:	609a      	str	r2, [r3, #8]
	xDMA.circular_mode = DMA_Circular_Mode.Disable;
 800143e:	2200      	movs	r2, #0
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <main+0xbc>)
 8001442:	621a      	str	r2, [r3, #32]
	xDMA.flow_control = DMA_Flow_Control.Peripheral_Control;
 8001444:	2220      	movs	r2, #32
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <main+0xbc>)
 8001448:	60da      	str	r2, [r3, #12]
	xDMA.priority_level = DMA_Priority_Level.Very_high;
 800144a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <main+0xbc>)
 8001450:	615a      	str	r2, [r3, #20]
	xDMA.memory_data_size = DMA_Memory_Data_Size.byte;
 8001452:	2200      	movs	r2, #0
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <main+0xbc>)
 8001456:	61da      	str	r2, [r3, #28]
	xDMA.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8001458:	2200      	movs	r2, #0
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <main+0xbc>)
 800145c:	619a      	str	r2, [r3, #24]
	xDMA.transfer_direction = DMA_Transfer_Direction.Memory_to_peripheral;
 800145e:	2240      	movs	r2, #64	; 0x40
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <main+0xbc>)
 8001462:	611a      	str	r2, [r3, #16]
	xDMA.interrupts =  DMA_Interrupts.Disable;
 8001464:	2200      	movs	r2, #0
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <main+0xbc>)
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
	DMA_Init(&xDMA);
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <main+0xbc>)
 800146c:	f7fe ff1a 	bl	80002a4 <DMA_Init>

	xDMA.memory_address = (uint32_t)&array[0];
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <main+0xc4>)
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <main+0xbc>)
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
	xDMA.peripheral_address = (uint32_t)&(xSPI.Port->DR);
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <main+0xac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	330c      	adds	r3, #12
 800147c:	461a      	mov	r2, r3
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <main+0xbc>)
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
	xDMA.buffer_length = 5;
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <main+0xbc>)
 8001484:	2205      	movs	r2, #5
 8001486:	861a      	strh	r2, [r3, #48]	; 0x30
	DMA_Set_Target(&xDMA);
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <main+0xbc>)
 800148a:	f7fe ff67 	bl	800035c <DMA_Set_Target>





	for(;;)
 800148e:	e7fe      	b.n	800148e <main+0xaa>
 8001490:	20000088 	.word	0x20000088
 8001494:	40013000 	.word	0x40013000
 8001498:	40020000 	.word	0x40020000
 800149c:	40026410 	.word	0x40026410
 80014a0:	200000b0 	.word	0x200000b0
 80014a4:	40026400 	.word	0x40026400
 80014a8:	08001684 	.word	0x08001684

080014ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	2302      	movs	r3, #2
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	2302      	movs	r3, #2
 80014e8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <SystemCoreClockUpdate+0xec>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d011      	beq.n	800151e <SystemCoreClockUpdate+0x4e>
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d844      	bhi.n	800158a <SystemCoreClockUpdate+0xba>
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <SystemCoreClockUpdate+0x3e>
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	2b04      	cmp	r3, #4
 800150a:	d004      	beq.n	8001516 <SystemCoreClockUpdate+0x46>
 800150c:	e03d      	b.n	800158a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <SystemCoreClockUpdate+0xf0>)
 8001510:	4a2c      	ldr	r2, [pc, #176]	; (80015c4 <SystemCoreClockUpdate+0xf4>)
 8001512:	601a      	str	r2, [r3, #0]
      break;
 8001514:	e03d      	b.n	8001592 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <SystemCoreClockUpdate+0xf0>)
 8001518:	4a2b      	ldr	r2, [pc, #172]	; (80015c8 <SystemCoreClockUpdate+0xf8>)
 800151a:	601a      	str	r2, [r3, #0]
      break;
 800151c:	e039      	b.n	8001592 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <SystemCoreClockUpdate+0xec>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	0d9b      	lsrs	r3, r3, #22
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <SystemCoreClockUpdate+0xec>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001532:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00c      	beq.n	8001554 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800153a:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <SystemCoreClockUpdate+0xf8>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <SystemCoreClockUpdate+0xec>)
 8001544:	6852      	ldr	r2, [r2, #4]
 8001546:	0992      	lsrs	r2, r2, #6
 8001548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e00b      	b.n	800156c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <SystemCoreClockUpdate+0xf4>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	fbb2 f3f3 	udiv	r3, r2, r3
 800155c:	4a17      	ldr	r2, [pc, #92]	; (80015bc <SystemCoreClockUpdate+0xec>)
 800155e:	6852      	ldr	r2, [r2, #4]
 8001560:	0992      	lsrs	r2, r2, #6
 8001562:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <SystemCoreClockUpdate+0xec>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	0c1b      	lsrs	r3, r3, #16
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	3301      	adds	r3, #1
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	fbb2 f3f3 	udiv	r3, r2, r3
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <SystemCoreClockUpdate+0xf0>)
 8001586:	6013      	str	r3, [r2, #0]
      break;
 8001588:	e003      	b.n	8001592 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <SystemCoreClockUpdate+0xf0>)
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <SystemCoreClockUpdate+0xf4>)
 800158e:	601a      	str	r2, [r3, #0]
      break;
 8001590:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <SystemCoreClockUpdate+0xec>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <SystemCoreClockUpdate+0xfc>)
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <SystemCoreClockUpdate+0xf0>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <SystemCoreClockUpdate+0xf0>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40023800 	.word	0x40023800
 80015c0:	20000000 	.word	0x20000000
 80015c4:	00f42400 	.word	0x00f42400
 80015c8:	007a1200 	.word	0x007a1200
 80015cc:	0800168c 	.word	0x0800168c

080015d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015d4:	f7ff ff6a 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <LoopForever+0x6>)
  ldr r1, =_edata
 80015da:	490d      	ldr	r1, [pc, #52]	; (8001610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <LoopForever+0xe>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f0:	4c0a      	ldr	r4, [pc, #40]	; (800161c <LoopForever+0x16>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015fe:	f000 f811 	bl	8001624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001602:	f7ff feef 	bl	80013e4 <main>

08001606 <LoopForever>:

LoopForever:
  b LoopForever
 8001606:	e7fe      	b.n	8001606 <LoopForever>
  ldr   r0, =_estack
 8001608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001614:	080016a4 	.word	0x080016a4
  ldr r2, =_sbss
 8001618:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800161c:	200000e4 	.word	0x200000e4

08001620 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC_IRQHandler>
	...

08001624 <__libc_init_array>:
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	4d0d      	ldr	r5, [pc, #52]	; (800165c <__libc_init_array+0x38>)
 8001628:	4c0d      	ldr	r4, [pc, #52]	; (8001660 <__libc_init_array+0x3c>)
 800162a:	1b64      	subs	r4, r4, r5
 800162c:	10a4      	asrs	r4, r4, #2
 800162e:	2600      	movs	r6, #0
 8001630:	42a6      	cmp	r6, r4
 8001632:	d109      	bne.n	8001648 <__libc_init_array+0x24>
 8001634:	4d0b      	ldr	r5, [pc, #44]	; (8001664 <__libc_init_array+0x40>)
 8001636:	4c0c      	ldr	r4, [pc, #48]	; (8001668 <__libc_init_array+0x44>)
 8001638:	f000 f818 	bl	800166c <_init>
 800163c:	1b64      	subs	r4, r4, r5
 800163e:	10a4      	asrs	r4, r4, #2
 8001640:	2600      	movs	r6, #0
 8001642:	42a6      	cmp	r6, r4
 8001644:	d105      	bne.n	8001652 <__libc_init_array+0x2e>
 8001646:	bd70      	pop	{r4, r5, r6, pc}
 8001648:	f855 3b04 	ldr.w	r3, [r5], #4
 800164c:	4798      	blx	r3
 800164e:	3601      	adds	r6, #1
 8001650:	e7ee      	b.n	8001630 <__libc_init_array+0xc>
 8001652:	f855 3b04 	ldr.w	r3, [r5], #4
 8001656:	4798      	blx	r3
 8001658:	3601      	adds	r6, #1
 800165a:	e7f2      	b.n	8001642 <__libc_init_array+0x1e>
 800165c:	0800169c 	.word	0x0800169c
 8001660:	0800169c 	.word	0x0800169c
 8001664:	0800169c 	.word	0x0800169c
 8001668:	080016a0 	.word	0x080016a0

0800166c <_init>:
 800166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166e:	bf00      	nop
 8001670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001672:	bc08      	pop	{r3}
 8001674:	469e      	mov	lr, r3
 8001676:	4770      	bx	lr

08001678 <_fini>:
 8001678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167a:	bf00      	nop
 800167c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800167e:	bc08      	pop	{r3}
 8001680:	469e      	mov	lr, r3
 8001682:	4770      	bx	lr
