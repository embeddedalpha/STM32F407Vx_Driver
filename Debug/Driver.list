
Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001294  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800143c  0800143c  0001143c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800144c  0800144c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800144c  0800144c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800144c  0800144c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800144c  0800144c  0001144c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001450  08001450  00011450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000044  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000048  20000048  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00004e02  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000a0c  00000000  00000000  00024e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000200  00000000  00000000  00025888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000172  00000000  00000000  00025a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019de9  00000000  00000000  00025bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000038fc  00000000  00000000  0003f9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008ea4e  00000000  00000000  000432df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000006f0  00000000  00000000  000d1d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000d2420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001424 	.word	0x08001424

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08001424 	.word	0x08001424

080001e8 <CAN1_TX_IRQHandler>:


/************************************************************************************************/

__WEAK void CAN1_TX_IRQHandler(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0


}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr

080001f6 <CAN1_RX0_IRQHandler>:

__WEAK void CAN1_RX0_IRQHandler(void)
{
 80001f6:	b480      	push	{r7}
 80001f8:	af00      	add	r7, sp, #0

}
 80001fa:	bf00      	nop
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <CAN1_RX1_IRQHandler>:

__WEAK void CAN1_RX1_IRQHandler(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0

}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr

08000212 <CAN1_SCE_IRQHandler>:

__WEAK void CAN1_SCE_IRQHandler(void)
{
 8000212:	b480      	push	{r7}
 8000214:	af00      	add	r7, sp, #0

}
 8000216:	bf00      	nop
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <CAN2_TX_IRQHandler>:

__WEAK void CAN2_TX_IRQHandler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0


}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <CAN2_RX0_IRQHandler>:

__WEAK void CAN2_RX0_IRQHandler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0

}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <CAN2_RX1_IRQHandler>:

__WEAK void CAN2_RX1_IRQHandler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0

}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr

0800024a <CAN2_SCE_IRQHandler>:

__WEAK void CAN2_SCE_IRQHandler(void)
{
 800024a:	b480      	push	{r7}
 800024c:	af00      	add	r7, sp, #0

}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <GPIO_Pin_High>:


}

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	6039      	str	r1, [r7, #0]
	Port -> ODR = 1 << pin;
 8000262:	2201      	movs	r2, #1
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	fa02 f303 	lsl.w	r3, r2, r3
 800026a:	461a      	mov	r2, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	615a      	str	r2, [r3, #20]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <GPIO_Pin_Low>:


void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	2101      	movs	r1, #1
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	fa01 f202 	lsl.w	r2, r1, r2
 8000292:	43d2      	mvns	r2, r2
 8000294:	401a      	ands	r2, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	615a      	str	r2, [r3, #20]
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
	...

080002a8 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a25      	ldr	r2, [pc, #148]	; (8000348 <GPIO_Clock_Enable+0xa0>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 80002b8:	4b24      	ldr	r3, [pc, #144]	; (800034c <GPIO_Clock_Enable+0xa4>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a23      	ldr	r2, [pc, #140]	; (800034c <GPIO_Clock_Enable+0xa4>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
 80002c4:	e039      	b.n	800033a <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a21      	ldr	r2, [pc, #132]	; (8000350 <GPIO_Clock_Enable+0xa8>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <GPIO_Clock_Enable+0xa4>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a1e      	ldr	r2, [pc, #120]	; (800034c <GPIO_Clock_Enable+0xa4>)
 80002d4:	f043 0302 	orr.w	r3, r3, #2
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
 80002da:	e02e      	b.n	800033a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a1d      	ldr	r2, [pc, #116]	; (8000354 <GPIO_Clock_Enable+0xac>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 80002e4:	4b19      	ldr	r3, [pc, #100]	; (800034c <GPIO_Clock_Enable+0xa4>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a18      	ldr	r2, [pc, #96]	; (800034c <GPIO_Clock_Enable+0xa4>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
 80002f0:	e023      	b.n	800033a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a18      	ldr	r2, [pc, #96]	; (8000358 <GPIO_Clock_Enable+0xb0>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <GPIO_Clock_Enable+0xa4>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a13      	ldr	r2, [pc, #76]	; (800034c <GPIO_Clock_Enable+0xa4>)
 8000300:	f043 0308 	orr.w	r3, r3, #8
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
 8000306:	e018      	b.n	800033a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a14      	ldr	r2, [pc, #80]	; (800035c <GPIO_Clock_Enable+0xb4>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <GPIO_Clock_Enable+0xa4>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <GPIO_Clock_Enable+0xa4>)
 8000316:	f043 0310 	orr.w	r3, r3, #16
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
 800031c:	e00d      	b.n	800033a <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <GPIO_Clock_Enable+0xb8>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <GPIO_Clock_Enable+0xa4>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a08      	ldr	r2, [pc, #32]	; (800034c <GPIO_Clock_Enable+0xa4>)
 800032c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
 8000332:	e002      	b.n	800033a <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8000334:	f04f 33ff 	mov.w	r3, #4294967295
 8000338:	e000      	b.n	800033c <GPIO_Clock_Enable+0x94>
	}

	return 1;
 800033a:	2301      	movs	r3, #1
}
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40020000 	.word	0x40020000
 800034c:	40023800 	.word	0x40023800
 8000350:	40020400 	.word	0x40020400
 8000354:	40020800 	.word	0x40020800
 8000358:	40020c00 	.word	0x40020c00
 800035c:	40021000 	.word	0x40021000
 8000360:	40021c00 	.word	0x40021c00

08000364 <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	4608      	mov	r0, r1
 800036e:	4611      	mov	r1, r2
 8000370:	461a      	mov	r2, r3
 8000372:	4603      	mov	r3, r0
 8000374:	70fb      	strb	r3, [r7, #3]
 8000376:	460b      	mov	r3, r1
 8000378:	70bb      	strb	r3, [r7, #2]
 800037a:	4613      	mov	r3, r2
 800037c:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f7ff ff92 	bl	80002a8 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	78b9      	ldrb	r1, [r7, #2]
 800038a:	78fa      	ldrb	r2, [r7, #3]
 800038c:	0052      	lsls	r2, r2, #1
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	431a      	orrs	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	7879      	ldrb	r1, [r7, #1]
 800039e:	78fa      	ldrb	r2, [r7, #3]
 80003a0:	fa01 f202 	lsl.w	r2, r1, r2
 80003a4:	431a      	orrs	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	7c39      	ldrb	r1, [r7, #16]
 80003b0:	78fa      	ldrb	r2, [r7, #3]
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	fa01 f202 	lsl.w	r2, r1, r2
 80003b8:	431a      	orrs	r2, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	68db      	ldr	r3, [r3, #12]
 80003c2:	7d39      	ldrb	r1, [r7, #20]
 80003c4:	78fa      	ldrb	r2, [r7, #3]
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	fa01 f202 	lsl.w	r2, r1, r2
 80003cc:	431a      	orrs	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	2b07      	cmp	r3, #7
 80003d6:	d80a      	bhi.n	80003ee <GPIO_Pin_Init+0x8a>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6a1b      	ldr	r3, [r3, #32]
 80003dc:	7e39      	ldrb	r1, [r7, #24]
 80003de:	78fa      	ldrb	r2, [r7, #3]
 80003e0:	0092      	lsls	r2, r2, #2
 80003e2:	fa01 f202 	lsl.w	r2, r1, r2
 80003e6:	431a      	orrs	r2, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 80003ec:	e00a      	b.n	8000404 <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f2:	7e39      	ldrb	r1, [r7, #24]
 80003f4:	78fa      	ldrb	r2, [r7, #3]
 80003f6:	3a08      	subs	r2, #8
 80003f8:	0092      	lsls	r2, r2, #2
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	431a      	orrs	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <SPI_Clock_Enable>:
 */

#include "SPI.h"

int8_t SPI_Clock_Enable(SPI_Config *config)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a14      	ldr	r2, [pc, #80]	; (8000470 <SPI_Clock_Enable+0x64>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d105      	bne.n	800042e <SPI_Clock_Enable+0x22>
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <SPI_Clock_Enable+0x68>)
 8000424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000426:	4a13      	ldr	r2, [pc, #76]	; (8000474 <SPI_Clock_Enable+0x68>)
 8000428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800042c:	6453      	str	r3, [r2, #68]	; 0x44
	if(config ->Port == SPI2)RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a11      	ldr	r2, [pc, #68]	; (8000478 <SPI_Clock_Enable+0x6c>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d105      	bne.n	8000444 <SPI_Clock_Enable+0x38>
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <SPI_Clock_Enable+0x68>)
 800043a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <SPI_Clock_Enable+0x68>)
 800043e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000442:	6413      	str	r3, [r2, #64]	; 0x40
	if(config ->Port == SPI3)RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0c      	ldr	r2, [pc, #48]	; (800047c <SPI_Clock_Enable+0x70>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <SPI_Clock_Enable+0x50>
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <SPI_Clock_Enable+0x68>)
 8000450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000452:	4a08      	ldr	r2, [pc, #32]	; (8000474 <SPI_Clock_Enable+0x68>)
 8000454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000458:	6413      	str	r3, [r2, #64]	; 0x40
 800045a:	e001      	b.n	8000460 <SPI_Clock_Enable+0x54>
	else
		retval = -1;
 800045c:	23ff      	movs	r3, #255	; 0xff
 800045e:	73fb      	strb	r3, [r7, #15]
	return retval;
 8000460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	40013000 	.word	0x40013000
 8000474:	40023800 	.word	0x40023800
 8000478:	40003800 	.word	0x40003800
 800047c:	40003c00 	.word	0x40003c00

08000480 <SPI_Config_Reset>:
	return retval;
}


int8_t SPI_Config_Reset(SPI_Config *config)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2RSTR |= RCC_APB2RSTR_SPI1RST;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a28      	ldr	r2, [pc, #160]	; (8000534 <SPI_Config_Reset+0xb4>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d105      	bne.n	80004a2 <SPI_Config_Reset+0x22>
 8000496:	4b28      	ldr	r3, [pc, #160]	; (8000538 <SPI_Config_Reset+0xb8>)
 8000498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049a:	4a27      	ldr	r2, [pc, #156]	; (8000538 <SPI_Config_Reset+0xb8>)
 800049c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004a0:	6253      	str	r3, [r2, #36]	; 0x24
	if(config ->Port == SPI2)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI2RST;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a25      	ldr	r2, [pc, #148]	; (800053c <SPI_Config_Reset+0xbc>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d105      	bne.n	80004b8 <SPI_Config_Reset+0x38>
 80004ac:	4b22      	ldr	r3, [pc, #136]	; (8000538 <SPI_Config_Reset+0xb8>)
 80004ae:	6a1b      	ldr	r3, [r3, #32]
 80004b0:	4a21      	ldr	r2, [pc, #132]	; (8000538 <SPI_Config_Reset+0xb8>)
 80004b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b6:	6213      	str	r3, [r2, #32]
	if(config ->Port == SPI3)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI3RST;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a20      	ldr	r2, [pc, #128]	; (8000540 <SPI_Config_Reset+0xc0>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d106      	bne.n	80004d0 <SPI_Config_Reset+0x50>
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <SPI_Config_Reset+0xb8>)
 80004c4:	6a1b      	ldr	r3, [r3, #32]
 80004c6:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <SPI_Config_Reset+0xb8>)
 80004c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004cc:	6213      	str	r3, [r2, #32]
 80004ce:	e001      	b.n	80004d4 <SPI_Config_Reset+0x54>
	else
		retval = -1;
 80004d0:	23ff      	movs	r3, #255	; 0xff
 80004d2:	73fb      	strb	r3, [r7, #15]

	config->NSS_Port = GPIOA;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a1b      	ldr	r2, [pc, #108]	; (8000544 <SPI_Config_Reset+0xc4>)
 80004d8:	609a      	str	r2, [r3, #8]
	config->NSS_Pin = 4;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2204      	movs	r2, #4
 80004de:	731a      	strb	r2, [r3, #12]
	config->clock_phase = SPI_Clock_Phase.High_1;
 80004e0:	2201      	movs	r2, #1
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	839a      	strh	r2, [r3, #28]
	config->clock_polarity = SPI_Clock_Polarity.High_1;
 80004e6:	2202      	movs	r2, #2
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	835a      	strh	r2, [r3, #26]
	config->mode = SPI_Mode.Full_Duplex_Master;
 80004ec:	2300      	movs	r3, #0
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	81da      	strh	r2, [r3, #14]
	config->crc = SPI_CRC.Disable;
 80004f4:	2200      	movs	r2, #0
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	821a      	strh	r2, [r3, #16]
	config->data_format = SPI_Data_Format.Bit8;
 80004fa:	2200      	movs	r2, #0
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	825a      	strh	r2, [r3, #18]
	config->frame_format = SPI_Frame_Format.MSB_First;
 8000500:	2200      	movs	r2, #0
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	829a      	strh	r2, [r3, #20]
	config->dma = SPI_DMA.TX_DMA_Disable | SPI_DMA.RX_DMA_Disable;
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	4313      	orrs	r3, r2
 800050c:	b2db      	uxtb	r3, r3
 800050e:	b29a      	uxth	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	841a      	strh	r2, [r3, #32]
	config->interrupt = SPI_Interrupt.Disable;
 8000514:	2300      	movs	r3, #0
 8000516:	b29a      	uxth	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	83da      	strh	r2, [r3, #30]
	config->type = SPI_Type.Master;
 800051c:	2204      	movs	r2, #4
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	831a      	strh	r2, [r3, #24]

	return retval;
 8000522:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40013000 	.word	0x40013000
 8000538:	40023800 	.word	0x40023800
 800053c:	40003800 	.word	0x40003800
 8000540:	40003c00 	.word	0x40003c00
 8000544:	40020000 	.word	0x40020000

08000548 <SPI_Pin>:


static void SPI_Pin(SPI_Config *config)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b087      	sub	sp, #28
 800054c:	af04      	add	r7, sp, #16
 800054e:	6078      	str	r0, [r7, #4]
	if(config -> Port == SPI1)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a77      	ldr	r2, [pc, #476]	; (8000734 <SPI_Pin+0x1ec>)
 8000556:	4293      	cmp	r3, r2
 8000558:	f040 8158 	bne.w	800080c <SPI_Pin+0x2c4>
	{
		if(config->mode == 0)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	89db      	ldrh	r3, [r3, #14]
 8000560:	2b00      	cmp	r3, #0
 8000562:	f040 8081 	bne.w	8000668 <SPI_Pin+0x120>
		{
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	b29b      	uxth	r3, r3
 800056c:	220f      	movs	r2, #15
 800056e:	4293      	cmp	r3, r2
 8000570:	d10d      	bne.n	800058e <SPI_Pin+0x46>
 8000572:	2002      	movs	r0, #2
 8000574:	2400      	movs	r4, #0
 8000576:	2303      	movs	r3, #3
 8000578:	2200      	movs	r2, #0
 800057a:	2105      	movs	r1, #5
 800057c:	9102      	str	r1, [sp, #8]
 800057e:	9201      	str	r2, [sp, #4]
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	4623      	mov	r3, r4
 8000584:	4602      	mov	r2, r0
 8000586:	2105      	movs	r1, #5
 8000588:	486b      	ldr	r0, [pc, #428]	; (8000738 <SPI_Pin+0x1f0>)
 800058a:	f7ff feeb 	bl	8000364 <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	b29b      	uxth	r3, r3
 8000594:	2217      	movs	r2, #23
 8000596:	4293      	cmp	r3, r2
 8000598:	d10d      	bne.n	80005b6 <SPI_Pin+0x6e>
 800059a:	2002      	movs	r0, #2
 800059c:	2400      	movs	r4, #0
 800059e:	2303      	movs	r3, #3
 80005a0:	2200      	movs	r2, #0
 80005a2:	2105      	movs	r1, #5
 80005a4:	9102      	str	r1, [sp, #8]
 80005a6:	9201      	str	r2, [sp, #4]
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	4623      	mov	r3, r4
 80005ac:	4602      	mov	r2, r0
 80005ae:	2103      	movs	r1, #3
 80005b0:	4862      	ldr	r0, [pc, #392]	; (800073c <SPI_Pin+0x1f4>)
 80005b2:	f7ff fed7 	bl	8000364 <GPIO_Pin_Init>

			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	799b      	ldrb	r3, [r3, #6]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	2210      	movs	r2, #16
 80005be:	4293      	cmp	r3, r2
 80005c0:	d10d      	bne.n	80005de <SPI_Pin+0x96>
 80005c2:	2002      	movs	r0, #2
 80005c4:	2400      	movs	r4, #0
 80005c6:	2303      	movs	r3, #3
 80005c8:	2200      	movs	r2, #0
 80005ca:	2105      	movs	r1, #5
 80005cc:	9102      	str	r1, [sp, #8]
 80005ce:	9201      	str	r2, [sp, #4]
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	4623      	mov	r3, r4
 80005d4:	4602      	mov	r2, r0
 80005d6:	2106      	movs	r1, #6
 80005d8:	4857      	ldr	r0, [pc, #348]	; (8000738 <SPI_Pin+0x1f0>)
 80005da:	f7ff fec3 	bl	8000364 <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	799b      	ldrb	r3, [r3, #6]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	2218      	movs	r2, #24
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d10d      	bne.n	8000606 <SPI_Pin+0xbe>
 80005ea:	2002      	movs	r0, #2
 80005ec:	2400      	movs	r4, #0
 80005ee:	2303      	movs	r3, #3
 80005f0:	2200      	movs	r2, #0
 80005f2:	2105      	movs	r1, #5
 80005f4:	9102      	str	r1, [sp, #8]
 80005f6:	9201      	str	r2, [sp, #4]
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4623      	mov	r3, r4
 80005fc:	4602      	mov	r2, r0
 80005fe:	2104      	movs	r1, #4
 8000600:	484e      	ldr	r0, [pc, #312]	; (800073c <SPI_Pin+0x1f4>)
 8000602:	f7ff feaf 	bl	8000364 <GPIO_Pin_Init>

			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	b29b      	uxth	r3, r3
 800060c:	2211      	movs	r2, #17
 800060e:	4293      	cmp	r3, r2
 8000610:	d10d      	bne.n	800062e <SPI_Pin+0xe6>
 8000612:	2002      	movs	r0, #2
 8000614:	2400      	movs	r4, #0
 8000616:	2303      	movs	r3, #3
 8000618:	2200      	movs	r2, #0
 800061a:	2105      	movs	r1, #5
 800061c:	9102      	str	r1, [sp, #8]
 800061e:	9201      	str	r2, [sp, #4]
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	4623      	mov	r3, r4
 8000624:	4602      	mov	r2, r0
 8000626:	2107      	movs	r1, #7
 8000628:	4843      	ldr	r0, [pc, #268]	; (8000738 <SPI_Pin+0x1f0>)
 800062a:	f7ff fe9b 	bl	8000364 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	b29b      	uxth	r3, r3
 8000634:	2219      	movs	r2, #25
 8000636:	4293      	cmp	r3, r2
 8000638:	d10d      	bne.n	8000656 <SPI_Pin+0x10e>
 800063a:	2002      	movs	r0, #2
 800063c:	2400      	movs	r4, #0
 800063e:	2303      	movs	r3, #3
 8000640:	2200      	movs	r2, #0
 8000642:	2105      	movs	r1, #5
 8000644:	9102      	str	r1, [sp, #8]
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	4623      	mov	r3, r4
 800064c:	4602      	mov	r2, r0
 800064e:	2105      	movs	r1, #5
 8000650:	483a      	ldr	r0, [pc, #232]	; (800073c <SPI_Pin+0x1f4>)
 8000652:	f7ff fe87 	bl	8000364 <GPIO_Pin_Init>

			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000664:	601a      	str	r2, [r3, #0]

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
		}
	}
}
 8000666:	e393      	b.n	8000d90 <SPI_Pin+0x848>
		else if(config->mode == 1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	89db      	ldrh	r3, [r3, #14]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d167      	bne.n	8000740 <SPI_Pin+0x1f8>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	b29b      	uxth	r3, r3
 8000676:	220f      	movs	r2, #15
 8000678:	4293      	cmp	r3, r2
 800067a:	d10d      	bne.n	8000698 <SPI_Pin+0x150>
 800067c:	2002      	movs	r0, #2
 800067e:	2400      	movs	r4, #0
 8000680:	2303      	movs	r3, #3
 8000682:	2200      	movs	r2, #0
 8000684:	2105      	movs	r1, #5
 8000686:	9102      	str	r1, [sp, #8]
 8000688:	9201      	str	r2, [sp, #4]
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	4623      	mov	r3, r4
 800068e:	4602      	mov	r2, r0
 8000690:	2105      	movs	r1, #5
 8000692:	4829      	ldr	r0, [pc, #164]	; (8000738 <SPI_Pin+0x1f0>)
 8000694:	f7ff fe66 	bl	8000364 <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	791b      	ldrb	r3, [r3, #4]
 800069c:	b29b      	uxth	r3, r3
 800069e:	2217      	movs	r2, #23
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d10d      	bne.n	80006c0 <SPI_Pin+0x178>
 80006a4:	2002      	movs	r0, #2
 80006a6:	2400      	movs	r4, #0
 80006a8:	2303      	movs	r3, #3
 80006aa:	2200      	movs	r2, #0
 80006ac:	2105      	movs	r1, #5
 80006ae:	9102      	str	r1, [sp, #8]
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4623      	mov	r3, r4
 80006b6:	4602      	mov	r2, r0
 80006b8:	2103      	movs	r1, #3
 80006ba:	4820      	ldr	r0, [pc, #128]	; (800073c <SPI_Pin+0x1f4>)
 80006bc:	f7ff fe52 	bl	8000364 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	795b      	ldrb	r3, [r3, #5]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	2211      	movs	r2, #17
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d10d      	bne.n	80006e8 <SPI_Pin+0x1a0>
 80006cc:	2002      	movs	r0, #2
 80006ce:	2400      	movs	r4, #0
 80006d0:	2303      	movs	r3, #3
 80006d2:	2200      	movs	r2, #0
 80006d4:	2105      	movs	r1, #5
 80006d6:	9102      	str	r1, [sp, #8]
 80006d8:	9201      	str	r2, [sp, #4]
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4623      	mov	r3, r4
 80006de:	4602      	mov	r2, r0
 80006e0:	2107      	movs	r1, #7
 80006e2:	4815      	ldr	r0, [pc, #84]	; (8000738 <SPI_Pin+0x1f0>)
 80006e4:	f7ff fe3e 	bl	8000364 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	795b      	ldrb	r3, [r3, #5]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	2219      	movs	r2, #25
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d10d      	bne.n	8000710 <SPI_Pin+0x1c8>
 80006f4:	2002      	movs	r0, #2
 80006f6:	2400      	movs	r4, #0
 80006f8:	2303      	movs	r3, #3
 80006fa:	2200      	movs	r2, #0
 80006fc:	2105      	movs	r1, #5
 80006fe:	9102      	str	r1, [sp, #8]
 8000700:	9201      	str	r2, [sp, #4]
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	4623      	mov	r3, r4
 8000706:	4602      	mov	r2, r0
 8000708:	2105      	movs	r1, #5
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <SPI_Pin+0x1f4>)
 800070c:	f7ff fe2a 	bl	8000364 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800071e:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	e32e      	b.n	8000d90 <SPI_Pin+0x848>
 8000732:	bf00      	nop
 8000734:	40013000 	.word	0x40013000
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400
		else if(config->mode == 2)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	89db      	ldrh	r3, [r3, #14]
 8000744:	2b02      	cmp	r3, #2
 8000746:	f040 8323 	bne.w	8000d90 <SPI_Pin+0x848>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	b29b      	uxth	r3, r3
 8000750:	220f      	movs	r2, #15
 8000752:	4293      	cmp	r3, r2
 8000754:	d10d      	bne.n	8000772 <SPI_Pin+0x22a>
 8000756:	2002      	movs	r0, #2
 8000758:	2400      	movs	r4, #0
 800075a:	2303      	movs	r3, #3
 800075c:	2200      	movs	r2, #0
 800075e:	2105      	movs	r1, #5
 8000760:	9102      	str	r1, [sp, #8]
 8000762:	9201      	str	r2, [sp, #4]
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	4623      	mov	r3, r4
 8000768:	4602      	mov	r2, r0
 800076a:	2105      	movs	r1, #5
 800076c:	48a0      	ldr	r0, [pc, #640]	; (80009f0 <SPI_Pin+0x4a8>)
 800076e:	f7ff fdf9 	bl	8000364 <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	b29b      	uxth	r3, r3
 8000778:	2217      	movs	r2, #23
 800077a:	4293      	cmp	r3, r2
 800077c:	d10d      	bne.n	800079a <SPI_Pin+0x252>
 800077e:	2002      	movs	r0, #2
 8000780:	2400      	movs	r4, #0
 8000782:	2303      	movs	r3, #3
 8000784:	2200      	movs	r2, #0
 8000786:	2105      	movs	r1, #5
 8000788:	9102      	str	r1, [sp, #8]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	4623      	mov	r3, r4
 8000790:	4602      	mov	r2, r0
 8000792:	2103      	movs	r1, #3
 8000794:	4897      	ldr	r0, [pc, #604]	; (80009f4 <SPI_Pin+0x4ac>)
 8000796:	f7ff fde5 	bl	8000364 <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	799b      	ldrb	r3, [r3, #6]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	2210      	movs	r2, #16
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d10d      	bne.n	80007c2 <SPI_Pin+0x27a>
 80007a6:	2002      	movs	r0, #2
 80007a8:	2400      	movs	r4, #0
 80007aa:	2303      	movs	r3, #3
 80007ac:	2200      	movs	r2, #0
 80007ae:	2105      	movs	r1, #5
 80007b0:	9102      	str	r1, [sp, #8]
 80007b2:	9201      	str	r2, [sp, #4]
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	4623      	mov	r3, r4
 80007b8:	4602      	mov	r2, r0
 80007ba:	2106      	movs	r1, #6
 80007bc:	488c      	ldr	r0, [pc, #560]	; (80009f0 <SPI_Pin+0x4a8>)
 80007be:	f7ff fdd1 	bl	8000364 <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	799b      	ldrb	r3, [r3, #6]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	2218      	movs	r2, #24
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d10d      	bne.n	80007ea <SPI_Pin+0x2a2>
 80007ce:	2002      	movs	r0, #2
 80007d0:	2400      	movs	r4, #0
 80007d2:	2303      	movs	r3, #3
 80007d4:	2200      	movs	r2, #0
 80007d6:	2105      	movs	r1, #5
 80007d8:	9102      	str	r1, [sp, #8]
 80007da:	9201      	str	r2, [sp, #4]
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	4623      	mov	r3, r4
 80007e0:	4602      	mov	r2, r0
 80007e2:	2104      	movs	r1, #4
 80007e4:	4883      	ldr	r0, [pc, #524]	; (80009f4 <SPI_Pin+0x4ac>)
 80007e6:	f7ff fdbd 	bl	8000364 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007f8:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000808:	601a      	str	r2, [r3, #0]
}
 800080a:	e2c1      	b.n	8000d90 <SPI_Pin+0x848>
	else if(config -> Port == SPI2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a79      	ldr	r2, [pc, #484]	; (80009f8 <SPI_Pin+0x4b0>)
 8000812:	4293      	cmp	r3, r2
 8000814:	f040 815a 	bne.w	8000acc <SPI_Pin+0x584>
		if(config->mode == 0)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	89db      	ldrh	r3, [r3, #14]
 800081c:	2b00      	cmp	r3, #0
 800081e:	f040 8081 	bne.w	8000924 <SPI_Pin+0x3dc>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	b29b      	uxth	r3, r3
 8000828:	22d2      	movs	r2, #210	; 0xd2
 800082a:	4293      	cmp	r3, r2
 800082c:	d10d      	bne.n	800084a <SPI_Pin+0x302>
 800082e:	2002      	movs	r0, #2
 8000830:	2400      	movs	r4, #0
 8000832:	2303      	movs	r3, #3
 8000834:	2200      	movs	r2, #0
 8000836:	2105      	movs	r1, #5
 8000838:	9102      	str	r1, [sp, #8]
 800083a:	9201      	str	r2, [sp, #4]
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	4623      	mov	r3, r4
 8000840:	4602      	mov	r2, r0
 8000842:	210a      	movs	r1, #10
 8000844:	486b      	ldr	r0, [pc, #428]	; (80009f4 <SPI_Pin+0x4ac>)
 8000846:	f7ff fd8d 	bl	8000364 <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	b29b      	uxth	r3, r3
 8000850:	22d5      	movs	r2, #213	; 0xd5
 8000852:	4293      	cmp	r3, r2
 8000854:	d10d      	bne.n	8000872 <SPI_Pin+0x32a>
 8000856:	2002      	movs	r0, #2
 8000858:	2400      	movs	r4, #0
 800085a:	2303      	movs	r3, #3
 800085c:	2200      	movs	r2, #0
 800085e:	2105      	movs	r1, #5
 8000860:	9102      	str	r1, [sp, #8]
 8000862:	9201      	str	r2, [sp, #4]
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	4623      	mov	r3, r4
 8000868:	4602      	mov	r2, r0
 800086a:	210d      	movs	r1, #13
 800086c:	4861      	ldr	r0, [pc, #388]	; (80009f4 <SPI_Pin+0x4ac>)
 800086e:	f7ff fd79 	bl	8000364 <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	799b      	ldrb	r3, [r3, #6]
 8000876:	b29b      	uxth	r3, r3
 8000878:	22d6      	movs	r2, #214	; 0xd6
 800087a:	4293      	cmp	r3, r2
 800087c:	d10d      	bne.n	800089a <SPI_Pin+0x352>
 800087e:	2002      	movs	r0, #2
 8000880:	2400      	movs	r4, #0
 8000882:	2303      	movs	r3, #3
 8000884:	2200      	movs	r2, #0
 8000886:	2105      	movs	r1, #5
 8000888:	9102      	str	r1, [sp, #8]
 800088a:	9201      	str	r2, [sp, #4]
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	4623      	mov	r3, r4
 8000890:	4602      	mov	r2, r0
 8000892:	210e      	movs	r1, #14
 8000894:	4857      	ldr	r0, [pc, #348]	; (80009f4 <SPI_Pin+0x4ac>)
 8000896:	f7ff fd65 	bl	8000364 <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	799b      	ldrb	r3, [r3, #6]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	2220      	movs	r2, #32
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d10d      	bne.n	80008c2 <SPI_Pin+0x37a>
 80008a6:	2002      	movs	r0, #2
 80008a8:	2400      	movs	r4, #0
 80008aa:	2303      	movs	r3, #3
 80008ac:	2200      	movs	r2, #0
 80008ae:	2105      	movs	r1, #5
 80008b0:	9102      	str	r1, [sp, #8]
 80008b2:	9201      	str	r2, [sp, #4]
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	4623      	mov	r3, r4
 80008b8:	4602      	mov	r2, r0
 80008ba:	2102      	movs	r1, #2
 80008bc:	484f      	ldr	r0, [pc, #316]	; (80009fc <SPI_Pin+0x4b4>)
 80008be:	f7ff fd51 	bl	8000364 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PB15) GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	795b      	ldrb	r3, [r3, #5]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	22d7      	movs	r2, #215	; 0xd7
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d10d      	bne.n	80008ea <SPI_Pin+0x3a2>
 80008ce:	2002      	movs	r0, #2
 80008d0:	2400      	movs	r4, #0
 80008d2:	2303      	movs	r3, #3
 80008d4:	2200      	movs	r2, #0
 80008d6:	2105      	movs	r1, #5
 80008d8:	9102      	str	r1, [sp, #8]
 80008da:	9201      	str	r2, [sp, #4]
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	4623      	mov	r3, r4
 80008e0:	4602      	mov	r2, r0
 80008e2:	210f      	movs	r1, #15
 80008e4:	4843      	ldr	r0, [pc, #268]	; (80009f4 <SPI_Pin+0x4ac>)
 80008e6:	f7ff fd3d 	bl	8000364 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PC3) GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	795b      	ldrb	r3, [r3, #5]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	2221      	movs	r2, #33	; 0x21
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d10d      	bne.n	8000912 <SPI_Pin+0x3ca>
 80008f6:	2002      	movs	r0, #2
 80008f8:	2400      	movs	r4, #0
 80008fa:	2303      	movs	r3, #3
 80008fc:	2200      	movs	r2, #0
 80008fe:	2105      	movs	r1, #5
 8000900:	9102      	str	r1, [sp, #8]
 8000902:	9201      	str	r2, [sp, #4]
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	4623      	mov	r3, r4
 8000908:	4602      	mov	r2, r0
 800090a:	2103      	movs	r1, #3
 800090c:	483b      	ldr	r0, [pc, #236]	; (80009fc <SPI_Pin+0x4b4>)
 800090e:	f7ff fd29 	bl	8000364 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000920:	601a      	str	r2, [r3, #0]
}
 8000922:	e235      	b.n	8000d90 <SPI_Pin+0x848>
		else if(config->mode == 1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	89db      	ldrh	r3, [r3, #14]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d169      	bne.n	8000a00 <SPI_Pin+0x4b8>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	791b      	ldrb	r3, [r3, #4]
 8000930:	b29b      	uxth	r3, r3
 8000932:	22d2      	movs	r2, #210	; 0xd2
 8000934:	4293      	cmp	r3, r2
 8000936:	d10d      	bne.n	8000954 <SPI_Pin+0x40c>
 8000938:	2002      	movs	r0, #2
 800093a:	2400      	movs	r4, #0
 800093c:	2303      	movs	r3, #3
 800093e:	2200      	movs	r2, #0
 8000940:	2105      	movs	r1, #5
 8000942:	9102      	str	r1, [sp, #8]
 8000944:	9201      	str	r2, [sp, #4]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	4623      	mov	r3, r4
 800094a:	4602      	mov	r2, r0
 800094c:	210a      	movs	r1, #10
 800094e:	4829      	ldr	r0, [pc, #164]	; (80009f4 <SPI_Pin+0x4ac>)
 8000950:	f7ff fd08 	bl	8000364 <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	791b      	ldrb	r3, [r3, #4]
 8000958:	b29b      	uxth	r3, r3
 800095a:	22d5      	movs	r2, #213	; 0xd5
 800095c:	4293      	cmp	r3, r2
 800095e:	d10d      	bne.n	800097c <SPI_Pin+0x434>
 8000960:	2002      	movs	r0, #2
 8000962:	2400      	movs	r4, #0
 8000964:	2303      	movs	r3, #3
 8000966:	2200      	movs	r2, #0
 8000968:	2105      	movs	r1, #5
 800096a:	9102      	str	r1, [sp, #8]
 800096c:	9201      	str	r2, [sp, #4]
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	4623      	mov	r3, r4
 8000972:	4602      	mov	r2, r0
 8000974:	210d      	movs	r1, #13
 8000976:	481f      	ldr	r0, [pc, #124]	; (80009f4 <SPI_Pin+0x4ac>)
 8000978:	f7ff fcf4 	bl	8000364 <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	791b      	ldrb	r3, [r3, #4]
 8000980:	b29b      	uxth	r3, r3
 8000982:	22d2      	movs	r2, #210	; 0xd2
 8000984:	4293      	cmp	r3, r2
 8000986:	d10d      	bne.n	80009a4 <SPI_Pin+0x45c>
 8000988:	2002      	movs	r0, #2
 800098a:	2400      	movs	r4, #0
 800098c:	2303      	movs	r3, #3
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	9102      	str	r1, [sp, #8]
 8000994:	9201      	str	r2, [sp, #4]
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	4623      	mov	r3, r4
 800099a:	4602      	mov	r2, r0
 800099c:	210a      	movs	r1, #10
 800099e:	4815      	ldr	r0, [pc, #84]	; (80009f4 <SPI_Pin+0x4ac>)
 80009a0:	f7ff fce0 	bl	8000364 <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	791b      	ldrb	r3, [r3, #4]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	22d5      	movs	r2, #213	; 0xd5
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d10d      	bne.n	80009cc <SPI_Pin+0x484>
 80009b0:	2002      	movs	r0, #2
 80009b2:	2400      	movs	r4, #0
 80009b4:	2303      	movs	r3, #3
 80009b6:	2200      	movs	r2, #0
 80009b8:	2105      	movs	r1, #5
 80009ba:	9102      	str	r1, [sp, #8]
 80009bc:	9201      	str	r2, [sp, #4]
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	4623      	mov	r3, r4
 80009c2:	4602      	mov	r2, r0
 80009c4:	210d      	movs	r1, #13
 80009c6:	480b      	ldr	r0, [pc, #44]	; (80009f4 <SPI_Pin+0x4ac>)
 80009c8:	f7ff fccc 	bl	8000364 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009da:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	e1d0      	b.n	8000d90 <SPI_Pin+0x848>
 80009ee:	bf00      	nop
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020400 	.word	0x40020400
 80009f8:	40003800 	.word	0x40003800
 80009fc:	40020800 	.word	0x40020800
		else if(config->mode == 2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	89db      	ldrh	r3, [r3, #14]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	f040 81c3 	bne.w	8000d90 <SPI_Pin+0x848>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	22d2      	movs	r2, #210	; 0xd2
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d10d      	bne.n	8000a32 <SPI_Pin+0x4ea>
 8000a16:	2002      	movs	r0, #2
 8000a18:	2400      	movs	r4, #0
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2105      	movs	r1, #5
 8000a20:	9102      	str	r1, [sp, #8]
 8000a22:	9201      	str	r2, [sp, #4]
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	4623      	mov	r3, r4
 8000a28:	4602      	mov	r2, r0
 8000a2a:	210a      	movs	r1, #10
 8000a2c:	48a2      	ldr	r0, [pc, #648]	; (8000cb8 <SPI_Pin+0x770>)
 8000a2e:	f7ff fc99 	bl	8000364 <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	22d5      	movs	r2, #213	; 0xd5
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10d      	bne.n	8000a5a <SPI_Pin+0x512>
 8000a3e:	2002      	movs	r0, #2
 8000a40:	2400      	movs	r4, #0
 8000a42:	2303      	movs	r3, #3
 8000a44:	2200      	movs	r2, #0
 8000a46:	2105      	movs	r1, #5
 8000a48:	9102      	str	r1, [sp, #8]
 8000a4a:	9201      	str	r2, [sp, #4]
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	4623      	mov	r3, r4
 8000a50:	4602      	mov	r2, r0
 8000a52:	210d      	movs	r1, #13
 8000a54:	4898      	ldr	r0, [pc, #608]	; (8000cb8 <SPI_Pin+0x770>)
 8000a56:	f7ff fc85 	bl	8000364 <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	799b      	ldrb	r3, [r3, #6]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	22d6      	movs	r2, #214	; 0xd6
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10d      	bne.n	8000a82 <SPI_Pin+0x53a>
 8000a66:	2002      	movs	r0, #2
 8000a68:	2400      	movs	r4, #0
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2105      	movs	r1, #5
 8000a70:	9102      	str	r1, [sp, #8]
 8000a72:	9201      	str	r2, [sp, #4]
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	4623      	mov	r3, r4
 8000a78:	4602      	mov	r2, r0
 8000a7a:	210e      	movs	r1, #14
 8000a7c:	488e      	ldr	r0, [pc, #568]	; (8000cb8 <SPI_Pin+0x770>)
 8000a7e:	f7ff fc71 	bl	8000364 <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	799b      	ldrb	r3, [r3, #6]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	2220      	movs	r2, #32
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d10d      	bne.n	8000aaa <SPI_Pin+0x562>
 8000a8e:	2002      	movs	r0, #2
 8000a90:	2400      	movs	r4, #0
 8000a92:	2303      	movs	r3, #3
 8000a94:	2200      	movs	r2, #0
 8000a96:	2105      	movs	r1, #5
 8000a98:	9102      	str	r1, [sp, #8]
 8000a9a:	9201      	str	r2, [sp, #4]
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	4623      	mov	r3, r4
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	4885      	ldr	r0, [pc, #532]	; (8000cbc <SPI_Pin+0x774>)
 8000aa6:	f7ff fc5d 	bl	8000364 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ab8:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ac8:	601a      	str	r2, [r3, #0]
}
 8000aca:	e161      	b.n	8000d90 <SPI_Pin+0x848>
	else if(config -> Port == SPI3)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a7b      	ldr	r2, [pc, #492]	; (8000cc0 <SPI_Pin+0x778>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	f040 815c 	bne.w	8000d90 <SPI_Pin+0x848>
		if(config->mode == 0)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	89db      	ldrh	r3, [r3, #14]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f040 8084 	bne.w	8000bea <SPI_Pin+0x6a2>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	2217      	movs	r2, #23
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d10d      	bne.n	8000b0a <SPI_Pin+0x5c2>
 8000aee:	2002      	movs	r0, #2
 8000af0:	2400      	movs	r4, #0
 8000af2:	2303      	movs	r3, #3
 8000af4:	2200      	movs	r2, #0
 8000af6:	2106      	movs	r1, #6
 8000af8:	9102      	str	r1, [sp, #8]
 8000afa:	9201      	str	r2, [sp, #4]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	4623      	mov	r3, r4
 8000b00:	4602      	mov	r2, r0
 8000b02:	2103      	movs	r1, #3
 8000b04:	486c      	ldr	r0, [pc, #432]	; (8000cb8 <SPI_Pin+0x770>)
 8000b06:	f7ff fc2d 	bl	8000364 <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	791b      	ldrb	r3, [r3, #4]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d10d      	bne.n	8000b34 <SPI_Pin+0x5ec>
 8000b18:	2002      	movs	r0, #2
 8000b1a:	2400      	movs	r4, #0
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2106      	movs	r1, #6
 8000b22:	9102      	str	r1, [sp, #8]
 8000b24:	9201      	str	r2, [sp, #4]
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	4623      	mov	r3, r4
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	210a      	movs	r1, #10
 8000b2e:	4863      	ldr	r0, [pc, #396]	; (8000cbc <SPI_Pin+0x774>)
 8000b30:	f7ff fc18 	bl	8000364 <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	799b      	ldrb	r3, [r3, #6]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	2218      	movs	r2, #24
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d10d      	bne.n	8000b5c <SPI_Pin+0x614>
 8000b40:	2002      	movs	r0, #2
 8000b42:	2400      	movs	r4, #0
 8000b44:	2303      	movs	r3, #3
 8000b46:	2200      	movs	r2, #0
 8000b48:	2106      	movs	r1, #6
 8000b4a:	9102      	str	r1, [sp, #8]
 8000b4c:	9201      	str	r2, [sp, #4]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	4623      	mov	r3, r4
 8000b52:	4602      	mov	r2, r0
 8000b54:	2104      	movs	r1, #4
 8000b56:	4858      	ldr	r0, [pc, #352]	; (8000cb8 <SPI_Pin+0x770>)
 8000b58:	f7ff fc04 	bl	8000364 <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	799b      	ldrb	r3, [r3, #6]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	f240 1237 	movw	r2, #311	; 0x137
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d10d      	bne.n	8000b86 <SPI_Pin+0x63e>
 8000b6a:	2002      	movs	r0, #2
 8000b6c:	2400      	movs	r4, #0
 8000b6e:	2303      	movs	r3, #3
 8000b70:	2200      	movs	r2, #0
 8000b72:	2106      	movs	r1, #6
 8000b74:	9102      	str	r1, [sp, #8]
 8000b76:	9201      	str	r2, [sp, #4]
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	210b      	movs	r1, #11
 8000b80:	484e      	ldr	r0, [pc, #312]	; (8000cbc <SPI_Pin+0x774>)
 8000b82:	f7ff fbef 	bl	8000364 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	795b      	ldrb	r3, [r3, #5]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	2219      	movs	r2, #25
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d10d      	bne.n	8000bae <SPI_Pin+0x666>
 8000b92:	2002      	movs	r0, #2
 8000b94:	2400      	movs	r4, #0
 8000b96:	2303      	movs	r3, #3
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2106      	movs	r1, #6
 8000b9c:	9102      	str	r1, [sp, #8]
 8000b9e:	9201      	str	r2, [sp, #4]
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	4623      	mov	r3, r4
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	2105      	movs	r1, #5
 8000ba8:	4843      	ldr	r0, [pc, #268]	; (8000cb8 <SPI_Pin+0x770>)
 8000baa:	f7ff fbdb 	bl	8000364 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	795b      	ldrb	r3, [r3, #5]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d10d      	bne.n	8000bd8 <SPI_Pin+0x690>
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	2400      	movs	r4, #0
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2106      	movs	r1, #6
 8000bc6:	9102      	str	r1, [sp, #8]
 8000bc8:	9201      	str	r2, [sp, #4]
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	4623      	mov	r3, r4
 8000bce:	4602      	mov	r2, r0
 8000bd0:	210c      	movs	r1, #12
 8000bd2:	483a      	ldr	r0, [pc, #232]	; (8000cbc <SPI_Pin+0x774>)
 8000bd4:	f7ff fbc6 	bl	8000364 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	e0d2      	b.n	8000d90 <SPI_Pin+0x848>
		else if(config->mode == 1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	89db      	ldrh	r3, [r3, #14]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d168      	bne.n	8000cc4 <SPI_Pin+0x77c>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	2217      	movs	r2, #23
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d10d      	bne.n	8000c1a <SPI_Pin+0x6d2>
 8000bfe:	2002      	movs	r0, #2
 8000c00:	2400      	movs	r4, #0
 8000c02:	2303      	movs	r3, #3
 8000c04:	2200      	movs	r2, #0
 8000c06:	2106      	movs	r1, #6
 8000c08:	9102      	str	r1, [sp, #8]
 8000c0a:	9201      	str	r2, [sp, #4]
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	4623      	mov	r3, r4
 8000c10:	4602      	mov	r2, r0
 8000c12:	2103      	movs	r1, #3
 8000c14:	4828      	ldr	r0, [pc, #160]	; (8000cb8 <SPI_Pin+0x770>)
 8000c16:	f7ff fba5 	bl	8000364 <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	791b      	ldrb	r3, [r3, #4]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d10d      	bne.n	8000c44 <SPI_Pin+0x6fc>
 8000c28:	2002      	movs	r0, #2
 8000c2a:	2400      	movs	r4, #0
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2106      	movs	r1, #6
 8000c32:	9102      	str	r1, [sp, #8]
 8000c34:	9201      	str	r2, [sp, #4]
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	4623      	mov	r3, r4
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	210a      	movs	r1, #10
 8000c3e:	481f      	ldr	r0, [pc, #124]	; (8000cbc <SPI_Pin+0x774>)
 8000c40:	f7ff fb90 	bl	8000364 <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	799b      	ldrb	r3, [r3, #6]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	2218      	movs	r2, #24
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d10d      	bne.n	8000c6c <SPI_Pin+0x724>
 8000c50:	2002      	movs	r0, #2
 8000c52:	2400      	movs	r4, #0
 8000c54:	2303      	movs	r3, #3
 8000c56:	2200      	movs	r2, #0
 8000c58:	2106      	movs	r1, #6
 8000c5a:	9102      	str	r1, [sp, #8]
 8000c5c:	9201      	str	r2, [sp, #4]
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	4623      	mov	r3, r4
 8000c62:	4602      	mov	r2, r0
 8000c64:	2104      	movs	r1, #4
 8000c66:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <SPI_Pin+0x770>)
 8000c68:	f7ff fb7c 	bl	8000364 <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	799b      	ldrb	r3, [r3, #6]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	f240 1237 	movw	r2, #311	; 0x137
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d10d      	bne.n	8000c96 <SPI_Pin+0x74e>
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	2400      	movs	r4, #0
 8000c7e:	2303      	movs	r3, #3
 8000c80:	2200      	movs	r2, #0
 8000c82:	2106      	movs	r1, #6
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9201      	str	r2, [sp, #4]
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	210b      	movs	r1, #11
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <SPI_Pin+0x774>)
 8000c92:	f7ff fb67 	bl	8000364 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ca4:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cb4:	601a      	str	r2, [r3, #0]
}
 8000cb6:	e06b      	b.n	8000d90 <SPI_Pin+0x848>
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40003c00 	.word	0x40003c00
		else if(config->mode == 2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	89db      	ldrh	r3, [r3, #14]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d161      	bne.n	8000d90 <SPI_Pin+0x848>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	791b      	ldrb	r3, [r3, #4]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	2217      	movs	r2, #23
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d10d      	bne.n	8000cf4 <SPI_Pin+0x7ac>
 8000cd8:	2002      	movs	r0, #2
 8000cda:	2400      	movs	r4, #0
 8000cdc:	2303      	movs	r3, #3
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2106      	movs	r1, #6
 8000ce2:	9102      	str	r1, [sp, #8]
 8000ce4:	9201      	str	r2, [sp, #4]
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	4623      	mov	r3, r4
 8000cea:	4602      	mov	r2, r0
 8000cec:	2103      	movs	r1, #3
 8000cee:	482a      	ldr	r0, [pc, #168]	; (8000d98 <SPI_Pin+0x850>)
 8000cf0:	f7ff fb38 	bl	8000364 <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d10d      	bne.n	8000d1e <SPI_Pin+0x7d6>
 8000d02:	2002      	movs	r0, #2
 8000d04:	2400      	movs	r4, #0
 8000d06:	2303      	movs	r3, #3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2106      	movs	r1, #6
 8000d0c:	9102      	str	r1, [sp, #8]
 8000d0e:	9201      	str	r2, [sp, #4]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	4623      	mov	r3, r4
 8000d14:	4602      	mov	r2, r0
 8000d16:	210a      	movs	r1, #10
 8000d18:	4820      	ldr	r0, [pc, #128]	; (8000d9c <SPI_Pin+0x854>)
 8000d1a:	f7ff fb23 	bl	8000364 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	795b      	ldrb	r3, [r3, #5]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	2219      	movs	r2, #25
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d10d      	bne.n	8000d46 <SPI_Pin+0x7fe>
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	2400      	movs	r4, #0
 8000d2e:	2303      	movs	r3, #3
 8000d30:	2200      	movs	r2, #0
 8000d32:	2106      	movs	r1, #6
 8000d34:	9102      	str	r1, [sp, #8]
 8000d36:	9201      	str	r2, [sp, #4]
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	4815      	ldr	r0, [pc, #84]	; (8000d98 <SPI_Pin+0x850>)
 8000d42:	f7ff fb0f 	bl	8000364 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	795b      	ldrb	r3, [r3, #5]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d10d      	bne.n	8000d70 <SPI_Pin+0x828>
 8000d54:	2002      	movs	r0, #2
 8000d56:	2400      	movs	r4, #0
 8000d58:	2303      	movs	r3, #3
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2106      	movs	r1, #6
 8000d5e:	9102      	str	r1, [sp, #8]
 8000d60:	9201      	str	r2, [sp, #4]
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	4623      	mov	r3, r4
 8000d66:	4602      	mov	r2, r0
 8000d68:	210c      	movs	r1, #12
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <SPI_Pin+0x854>)
 8000d6c:	f7ff fafa 	bl	8000364 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d7e:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	40020800 	.word	0x40020800

08000da0 <SPI_Init>:


void SPI_Init(SPI_Config *config)
{
 8000da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af04      	add	r7, sp, #16
 8000da6:	6078      	str	r0, [r7, #4]
	if(config->type == SPI_Type.Master)GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	8b1b      	ldrh	r3, [r3, #24]
 8000dac:	2204      	movs	r2, #4
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10f      	bne.n	8000dd2 <SPI_Init+0x32>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6898      	ldr	r0, [r3, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7b19      	ldrb	r1, [r3, #12]
 8000dba:	2501      	movs	r5, #1
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2400      	movs	r4, #0
 8000dc4:	9402      	str	r4, [sp, #8]
 8000dc6:	9201      	str	r2, [sp, #4]
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	4633      	mov	r3, r6
 8000dcc:	462a      	mov	r2, r5
 8000dce:	f7ff fac9 	bl	8000364 <GPIO_Pin_Init>
	if(config->type == SPI_Type.Slave)GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.Input, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	8b1b      	ldrh	r3, [r3, #24]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d10f      	bne.n	8000dfc <SPI_Init+0x5c>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6898      	ldr	r0, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7b19      	ldrb	r1, [r3, #12]
 8000de4:	2500      	movs	r5, #0
 8000de6:	2600      	movs	r6, #0
 8000de8:	2303      	movs	r3, #3
 8000dea:	2201      	movs	r2, #1
 8000dec:	2400      	movs	r4, #0
 8000dee:	9402      	str	r4, [sp, #8]
 8000df0:	9201      	str	r2, [sp, #4]
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	4633      	mov	r3, r6
 8000df6:	462a      	mov	r2, r5
 8000df8:	f7ff fab4 	bl	8000364 <GPIO_Pin_Init>

	SPI_Clock_Enable(config);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fb05 	bl	800040c <SPI_Clock_Enable>
	SPI_Pin(config);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff fba0 	bl	8000548 <SPI_Pin>

	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	8b99      	ldrh	r1, [r3, #28]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	8b5b      	ldrh	r3, [r3, #26]
					config->type | config->frame_format |
					config->data_format | config->crc | (config->prescaler<<3);
 8000e16:	430b      	orrs	r3, r1
 8000e18:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	8b1b      	ldrh	r3, [r3, #24]
					config->data_format | config->crc | (config->prescaler<<3);
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	8a9b      	ldrh	r3, [r3, #20]
					config->data_format | config->crc | (config->prescaler<<3);
 8000e26:	430b      	orrs	r3, r1
 8000e28:	b299      	uxth	r1, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	8a5b      	ldrh	r3, [r3, #18]
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	b299      	uxth	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	8a1b      	ldrh	r3, [r3, #16]
 8000e36:	430b      	orrs	r3, r1
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	8adb      	ldrh	r3, [r3, #22]
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	430b      	orrs	r3, r1
 8000e44:	4619      	mov	r1, r3
	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]
	config->Port->CR2 |= config->dma | config->interrupt;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	8c19      	ldrh	r1, [r3, #32]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	8bdb      	ldrh	r3, [r3, #30]
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4619      	mov	r1, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	605a      	str	r2, [r3, #4]

	if(config->Port == SPI1)config->speed = (SystemCoreClock/2)/(2*2^(config->prescaler));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a18      	ldr	r2, [pc, #96]	; (8000ed0 <SPI_Init+0x130>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d10c      	bne.n	8000e8e <SPI_Init+0xee>
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <SPI_Init+0x134>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	085b      	lsrs	r3, r3, #1
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	8ad2      	ldrh	r2, [r2, #22]
 8000e7e:	f082 0204 	eor.w	r2, r2, #4
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24
 8000e8c:	e00b      	b.n	8000ea6 <SPI_Init+0x106>
	else config->speed = (SystemCoreClock/4)/(2*2^(config->prescaler));
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <SPI_Init+0x134>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	8ad2      	ldrh	r2, [r2, #22]
 8000e98:	f082 0204 	eor.w	r2, r2, #4
 8000e9c:	b292      	uxth	r2, r2
 8000e9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24

	config->Port -> CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000eb4:	601a      	str	r2, [r3, #0]
	config->Port -> CR1 |= SPI_CR1_SPE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ec4:	601a      	str	r2, [r3, #0]

}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40013000 	.word	0x40013000
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <SPI_TRX_Byte>:
	if(config ->Port == SPI3)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI3RST;
}


uint16_t SPI_TRX_Byte(SPI_Config *config,uint16_t tx_data)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
	volatile uint16_t temp = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8000ee8:	bf00      	nop
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f8      	beq.n	8000eea <SPI_TRX_Byte+0x12>
	config->Port -> DR = tx_data;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	887a      	ldrh	r2, [r7, #2]
 8000efe:	60da      	str	r2, [r3, #12]
	while (!(config->Port->SR & SPI_SR_RXNE));
 8000f00:	bf00      	nop
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f8      	beq.n	8000f02 <SPI_TRX_Byte+0x2a>
	temp = config->Port -> DR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8000f1a:	bf00      	nop
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f8      	beq.n	8000f1c <SPI_TRX_Byte+0x44>
	while (config->Port->SR & SPI_SR_BSY);
 8000f2a:	bf00      	nop
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f8      	bne.n	8000f2c <SPI_TRX_Byte+0x54>
	return temp;
 8000f3a:	89fb      	ldrh	r3, [r7, #14]
 8000f3c:	b29b      	uxth	r3, r3
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <SPI_NSS_High>:
	}

}

void SPI_NSS_High(SPI_Config *config)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->NSS_Port, config->NSS_Pin);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7b1b      	ldrb	r3, [r3, #12]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	f7ff f97b 	bl	8000258 <GPIO_Pin_High>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <SPI_NSS_Low>:

void SPI_NSS_Low(SPI_Config *config)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->NSS_Port, config->NSS_Pin);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7b1b      	ldrb	r3, [r3, #12]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	f7ff f97d 	bl	800027c <GPIO_Pin_Low>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ffc2 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 800102a:	2304      	movs	r3, #4
 800102c:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 800102e:	23a8      	movs	r3, #168	; 0xa8
 8001030:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 8001036:	2307      	movs	r3, #7
 8001038:	713b      	strb	r3, [r7, #4]

	RCC->PLLCFGR = 0x00000000;
 800103a:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <MCU_Clock_Setup+0x10c>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001040:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <MCU_Clock_Setup+0x10c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a3a      	ldr	r2, [pc, #232]	; (8001130 <MCU_Clock_Setup+0x10c>)
 8001046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 800104c:	bf00      	nop
 800104e:	4b38      	ldr	r3, [pc, #224]	; (8001130 <MCU_Clock_Setup+0x10c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f9      	beq.n	800104e <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 800105a:	4b35      	ldr	r3, [pc, #212]	; (8001130 <MCU_Clock_Setup+0x10c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a34      	ldr	r2, [pc, #208]	; (8001130 <MCU_Clock_Setup+0x10c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
	PWR ->CR |= PWR_CR_VOS;
 8001066:	4b33      	ldr	r3, [pc, #204]	; (8001134 <MCU_Clock_Setup+0x110>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a32      	ldr	r2, [pc, #200]	; (8001134 <MCU_Clock_Setup+0x110>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <MCU_Clock_Setup+0x114>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a30      	ldr	r2, [pc, #192]	; (8001138 <MCU_Clock_Setup+0x114>)
 8001078:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800107c:	f043 0305 	orr.w	r3, r3, #5
 8001080:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <MCU_Clock_Setup+0x10c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	793a      	ldrb	r2, [r7, #4]
 8001088:	0611      	lsls	r1, r2, #24
 800108a:	797a      	ldrb	r2, [r7, #5]
 800108c:	0412      	lsls	r2, r2, #16
 800108e:	4311      	orrs	r1, r2
 8001090:	79ba      	ldrb	r2, [r7, #6]
 8001092:	0192      	lsls	r2, r2, #6
 8001094:	4311      	orrs	r1, r2
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	430a      	orrs	r2, r1
 800109a:	4611      	mov	r1, r2
 800109c:	4a24      	ldr	r2, [pc, #144]	; (8001130 <MCU_Clock_Setup+0x10c>)
 800109e:	430b      	orrs	r3, r1
 80010a0:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a22      	ldr	r2, [pc, #136]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ac:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010b0:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010bc:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80010c0:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010cc:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010d8:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80010da:	bf00      	nop
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f9      	beq.n	80010dc <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a10      	ldr	r2, [pc, #64]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80010f4:	bf00      	nop
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MCU_Clock_Setup+0x10c>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d1f9      	bne.n	80010f6 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 8001102:	f000 f8c1 	bl	8001288 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <MCU_Clock_Setup+0x118>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	08db      	lsrs	r3, r3, #3
 800110c:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <MCU_Clock_Setup+0x11c>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	085b      	lsrs	r3, r3, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff63 	bl	8000fe0 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <MCU_Clock_Setup+0x10c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <MCU_Clock_Setup+0x10c>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000
 8001138:	40023c00 	.word	0x40023c00
 800113c:	20000000 	.word	0x20000000
 8001140:	18618619 	.word	0x18618619

08001144 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <Delay_Config+0x2c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <Delay_Config+0x2c>)
 8001150:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001154:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <Delay_Config+0x2c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <Delay_Config+0x2c>)
 800115e:	2205      	movs	r2, #5
 8001160:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80011c8 <Delay_ms+0x54>
 8001186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800118e:	ee17 3a90 	vmov	r3, s15
 8001192:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <Delay_ms+0x58>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <Delay_ms+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <Delay_ms+0x58>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <Delay_ms+0x58>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 80011ac:	bf00      	nop
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <Delay_ms+0x58>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f9      	beq.n	80011ae <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	48241000 	.word	0x48241000
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <main>:

SPI_Config xDevice;


int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 80011d6:	f7ff ff25 	bl	8001024 <MCU_Clock_Setup>
	Delay_Config();
 80011da:	f7ff ffb3 	bl	8001144 <Delay_Config>

	SPI_Config_Reset(&xDevice);
 80011de:	481d      	ldr	r0, [pc, #116]	; (8001254 <main+0x84>)
 80011e0:	f7ff f94e 	bl	8000480 <SPI_Config_Reset>

	xDevice.Port = SPI1;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <main+0x84>)
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <main+0x88>)
 80011e8:	601a      	str	r2, [r3, #0]
	xDevice.clock_pin = SPI1_CLK.PA5;
 80011ea:	230f      	movs	r3, #15
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <main+0x84>)
 80011f0:	711a      	strb	r2, [r3, #4]
	xDevice.miso_pin = SPI1_MISO.PA6;
 80011f2:	2310      	movs	r3, #16
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <main+0x84>)
 80011f8:	719a      	strb	r2, [r3, #6]
	xDevice.mosi_pin = SPI1_MOSI.PA7;
 80011fa:	2311      	movs	r3, #17
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <main+0x84>)
 8001200:	715a      	strb	r2, [r3, #5]
	xDevice.NSS_Port = GPIOA;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <main+0x84>)
 8001204:	4a15      	ldr	r2, [pc, #84]	; (800125c <main+0x8c>)
 8001206:	609a      	str	r2, [r3, #8]
	xDevice.NSS_Pin = 4;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <main+0x84>)
 800120a:	2204      	movs	r2, #4
 800120c:	731a      	strb	r2, [r3, #12]
	xDevice.prescaler = SPI_Prescaler.CLK_div_8;
 800120e:	2202      	movs	r2, #2
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <main+0x84>)
 8001212:	82da      	strh	r2, [r3, #22]
	SPI_Init(&xDevice);
 8001214:	480f      	ldr	r0, [pc, #60]	; (8001254 <main+0x84>)
 8001216:	f7ff fdc3 	bl	8000da0 <SPI_Init>

	uint16_t rx_byte;

	for(;;)
	{
		SPI_NSS_Low(&xDevice);
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <main+0x84>)
 800121c:	f7ff fea5 	bl	8000f6a <SPI_NSS_Low>
		rx_byte = SPI_TRX_Byte(&xDevice, 0xAA);
 8001220:	21aa      	movs	r1, #170	; 0xaa
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <main+0x84>)
 8001224:	f7ff fe58 	bl	8000ed8 <SPI_TRX_Byte>
 8001228:	4603      	mov	r3, r0
 800122a:	80fb      	strh	r3, [r7, #6]
		rx_byte = SPI_TRX_Byte(&xDevice, 0xBB);
 800122c:	21bb      	movs	r1, #187	; 0xbb
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <main+0x84>)
 8001230:	f7ff fe52 	bl	8000ed8 <SPI_TRX_Byte>
 8001234:	4603      	mov	r3, r0
 8001236:	80fb      	strh	r3, [r7, #6]
		rx_byte = SPI_TRX_Byte(&xDevice, 0xCC);
 8001238:	21cc      	movs	r1, #204	; 0xcc
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <main+0x84>)
 800123c:	f7ff fe4c 	bl	8000ed8 <SPI_TRX_Byte>
 8001240:	4603      	mov	r3, r0
 8001242:	80fb      	strh	r3, [r7, #6]
		SPI_NSS_High(&xDevice);
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <main+0x84>)
 8001246:	f7ff fe80 	bl	8000f4a <SPI_NSS_High>
		Delay_ms(100);
 800124a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001260 <main+0x90>
 800124e:	f7ff ff91 	bl	8001174 <Delay_ms>
		SPI_NSS_Low(&xDevice);
 8001252:	e7e2      	b.n	800121a <main+0x4a>
 8001254:	20000020 	.word	0x20000020
 8001258:	40013000 	.word	0x40013000
 800125c:	40020000 	.word	0x40020000
 8001260:	42c80000 	.word	0x42c80000

08001264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <SystemInit+0x20>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <SystemInit+0x20>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	2302      	movs	r3, #2
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	2302      	movs	r3, #2
 80012a0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80012a2:	4b34      	ldr	r3, [pc, #208]	; (8001374 <SystemCoreClockUpdate+0xec>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d011      	beq.n	80012d6 <SystemCoreClockUpdate+0x4e>
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d844      	bhi.n	8001342 <SystemCoreClockUpdate+0xba>
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <SystemCoreClockUpdate+0x3e>
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d004      	beq.n	80012ce <SystemCoreClockUpdate+0x46>
 80012c4:	e03d      	b.n	8001342 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <SystemCoreClockUpdate+0xf0>)
 80012c8:	4a2c      	ldr	r2, [pc, #176]	; (800137c <SystemCoreClockUpdate+0xf4>)
 80012ca:	601a      	str	r2, [r3, #0]
      break;
 80012cc:	e03d      	b.n	800134a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <SystemCoreClockUpdate+0xf0>)
 80012d0:	4a2b      	ldr	r2, [pc, #172]	; (8001380 <SystemCoreClockUpdate+0xf8>)
 80012d2:	601a      	str	r2, [r3, #0]
      break;
 80012d4:	e039      	b.n	800134a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <SystemCoreClockUpdate+0xec>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	0d9b      	lsrs	r3, r3, #22
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <SystemCoreClockUpdate+0xec>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ea:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00c      	beq.n	800130c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80012f2:	4a23      	ldr	r2, [pc, #140]	; (8001380 <SystemCoreClockUpdate+0xf8>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <SystemCoreClockUpdate+0xec>)
 80012fc:	6852      	ldr	r2, [r2, #4]
 80012fe:	0992      	lsrs	r2, r2, #6
 8001300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	e00b      	b.n	8001324 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800130c:	4a1b      	ldr	r2, [pc, #108]	; (800137c <SystemCoreClockUpdate+0xf4>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	fbb2 f3f3 	udiv	r3, r2, r3
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <SystemCoreClockUpdate+0xec>)
 8001316:	6852      	ldr	r2, [r2, #4]
 8001318:	0992      	lsrs	r2, r2, #6
 800131a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <SystemCoreClockUpdate+0xec>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	0c1b      	lsrs	r3, r3, #16
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	3301      	adds	r3, #1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	fbb2 f3f3 	udiv	r3, r2, r3
 800133c:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <SystemCoreClockUpdate+0xf0>)
 800133e:	6013      	str	r3, [r2, #0]
      break;
 8001340:	e003      	b.n	800134a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <SystemCoreClockUpdate+0xf0>)
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <SystemCoreClockUpdate+0xf4>)
 8001346:	601a      	str	r2, [r3, #0]
      break;
 8001348:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <SystemCoreClockUpdate+0xec>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f003 030f 	and.w	r3, r3, #15
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <SystemCoreClockUpdate+0xfc>)
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <SystemCoreClockUpdate+0xf0>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <SystemCoreClockUpdate+0xf0>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40023800 	.word	0x40023800
 8001378:	20000000 	.word	0x20000000
 800137c:	00f42400 	.word	0x00f42400
 8001380:	007a1200 	.word	0x007a1200
 8001384:	0800143c 	.word	0x0800143c

08001388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800138a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800138c:	f7ff ff6a 	bl	8001264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001392:	490d      	ldr	r1, [pc, #52]	; (80013c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <LoopForever+0xe>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a8:	4c0a      	ldr	r4, [pc, #40]	; (80013d4 <LoopForever+0x16>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013b6:	f000 f811 	bl	80013dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ba:	f7ff ff09 	bl	80011d0 <main>

080013be <LoopForever>:

LoopForever:
  b LoopForever
 80013be:	e7fe      	b.n	80013be <LoopForever>
  ldr   r0, =_estack
 80013c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80013cc:	08001454 	.word	0x08001454
  ldr r2, =_sbss
 80013d0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80013d4:	20000048 	.word	0x20000048

080013d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC_IRQHandler>
	...

080013dc <__libc_init_array>:
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	4d0d      	ldr	r5, [pc, #52]	; (8001414 <__libc_init_array+0x38>)
 80013e0:	4c0d      	ldr	r4, [pc, #52]	; (8001418 <__libc_init_array+0x3c>)
 80013e2:	1b64      	subs	r4, r4, r5
 80013e4:	10a4      	asrs	r4, r4, #2
 80013e6:	2600      	movs	r6, #0
 80013e8:	42a6      	cmp	r6, r4
 80013ea:	d109      	bne.n	8001400 <__libc_init_array+0x24>
 80013ec:	4d0b      	ldr	r5, [pc, #44]	; (800141c <__libc_init_array+0x40>)
 80013ee:	4c0c      	ldr	r4, [pc, #48]	; (8001420 <__libc_init_array+0x44>)
 80013f0:	f000 f818 	bl	8001424 <_init>
 80013f4:	1b64      	subs	r4, r4, r5
 80013f6:	10a4      	asrs	r4, r4, #2
 80013f8:	2600      	movs	r6, #0
 80013fa:	42a6      	cmp	r6, r4
 80013fc:	d105      	bne.n	800140a <__libc_init_array+0x2e>
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
 8001400:	f855 3b04 	ldr.w	r3, [r5], #4
 8001404:	4798      	blx	r3
 8001406:	3601      	adds	r6, #1
 8001408:	e7ee      	b.n	80013e8 <__libc_init_array+0xc>
 800140a:	f855 3b04 	ldr.w	r3, [r5], #4
 800140e:	4798      	blx	r3
 8001410:	3601      	adds	r6, #1
 8001412:	e7f2      	b.n	80013fa <__libc_init_array+0x1e>
 8001414:	0800144c 	.word	0x0800144c
 8001418:	0800144c 	.word	0x0800144c
 800141c:	0800144c 	.word	0x0800144c
 8001420:	08001450 	.word	0x08001450

08001424 <_init>:
 8001424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001426:	bf00      	nop
 8001428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800142a:	bc08      	pop	{r3}
 800142c:	469e      	mov	lr, r3
 800142e:	4770      	bx	lr

08001430 <_fini>:
 8001430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001432:	bf00      	nop
 8001434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001436:	bc08      	pop	{r3}
 8001438:	469e      	mov	lr, r3
 800143a:	4770      	bx	lr
